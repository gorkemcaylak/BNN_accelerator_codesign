// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "DigitRec.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic DigitRec::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic DigitRec::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> DigitRec::ap_ST_fsm_state1 = "1";
const sc_lv<32> DigitRec::ap_ST_fsm_state2 = "10";
const sc_lv<32> DigitRec::ap_ST_fsm_state3 = "100";
const sc_lv<32> DigitRec::ap_ST_fsm_state4 = "1000";
const sc_lv<32> DigitRec::ap_ST_fsm_state5 = "10000";
const sc_lv<32> DigitRec::ap_ST_fsm_state6 = "100000";
const sc_lv<32> DigitRec::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_pp1_stage0 = "1000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_pp1_stage1 = "10000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_pp1_stage2 = "100000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_pp1_stage3 = "1000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state28 = "10000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state29 = "100000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state30 = "1000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state31 = "10000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state32 = "100000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state33 = "1000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state34 = "10000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state35 = "100000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state36 = "1000000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state37 = "10000000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state38 = "100000000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state39 = "1000000000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state40 = "10000000000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state41 = "100000000000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state42 = "1000000000000000000000000000000";
const sc_lv<32> DigitRec::ap_ST_fsm_state43 = "10000000000000000000000000000000";
const sc_lv<32> DigitRec::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool DigitRec::ap_const_boolean_1 = true;
const sc_lv<32> DigitRec::ap_const_lv32_2 = "10";
const sc_lv<32> DigitRec::ap_const_lv32_9 = "1001";
const sc_lv<32> DigitRec::ap_const_lv32_F = "1111";
const bool DigitRec::ap_const_boolean_0 = false;
const sc_lv<1> DigitRec::ap_const_lv1_0 = "0";
const sc_lv<32> DigitRec::ap_const_lv32_E = "1110";
const sc_lv<32> DigitRec::ap_const_lv32_11 = "10001";
const sc_lv<32> DigitRec::ap_const_lv32_18 = "11000";
const sc_lv<32> DigitRec::ap_const_lv32_19 = "11001";
const sc_lv<32> DigitRec::ap_const_lv32_1A = "11010";
const sc_lv<32> DigitRec::ap_const_lv32_1F = "11111";
const int DigitRec::C_S_AXI_DATA_WIDTH = "100000";
const int DigitRec::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int DigitRec::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int DigitRec::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int DigitRec::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> DigitRec::ap_const_lv32_1 = "1";
const sc_lv<32> DigitRec::ap_const_lv32_A = "1010";
const sc_lv<32> DigitRec::ap_const_lv32_C = "1100";
const sc_lv<32> DigitRec::ap_const_lv32_D = "1101";
const sc_lv<32> DigitRec::ap_const_lv32_10 = "10000";
const sc_lv<32> DigitRec::ap_const_lv32_B = "1011";
const sc_lv<1> DigitRec::ap_const_lv1_1 = "1";
const sc_lv<8> DigitRec::ap_const_lv8_0 = "00000000";
const sc_lv<5> DigitRec::ap_const_lv5_0 = "00000";
const sc_lv<15> DigitRec::ap_const_lv15_0 = "000000000000000";
const sc_lv<11> DigitRec::ap_const_lv11_0 = "00000000000";
const sc_lv<4> DigitRec::ap_const_lv4_0 = "0000";
const sc_lv<3> DigitRec::ap_const_lv3_0 = "000";
const sc_lv<2> DigitRec::ap_const_lv2_0 = "00";
const sc_lv<8> DigitRec::ap_const_lv8_FF = "11111111";
const sc_lv<6> DigitRec::ap_const_lv6_32 = "110010";
const sc_lv<32> DigitRec::ap_const_lv32_3 = "11";
const sc_lv<32> DigitRec::ap_const_lv32_3F = "111111";
const sc_lv<8> DigitRec::ap_const_lv8_B4 = "10110100";
const sc_lv<8> DigitRec::ap_const_lv8_1 = "1";
const sc_lv<5> DigitRec::ap_const_lv5_1E = "11110";
const sc_lv<5> DigitRec::ap_const_lv5_1 = "1";
const sc_lv<15> DigitRec::ap_const_lv15_4650 = "100011001010000";
const sc_lv<15> DigitRec::ap_const_lv15_1 = "1";
const sc_lv<4> DigitRec::ap_const_lv4_A = "1010";
const sc_lv<11> DigitRec::ap_const_lv11_1 = "1";
const sc_lv<4> DigitRec::ap_const_lv4_1 = "1";
const sc_lv<32> DigitRec::ap_const_lv32_4 = "100";
const sc_lv<32> DigitRec::ap_const_lv32_7 = "111";
const sc_lv<64> DigitRec::ap_const_lv64_F = "1111";
const sc_lv<64> DigitRec::ap_const_lv64_FFFFFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<15> DigitRec::ap_const_lv15_708 = "11100001000";

DigitRec::DigitRec(sc_module_name name) : sc_module(name), mVcdFile(0) {
    DigitRec_control_s_axi_U = new DigitRec_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("DigitRec_control_s_axi_U");
    DigitRec_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    DigitRec_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    DigitRec_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    DigitRec_control_s_axi_U->WVALID(s_axi_control_WVALID);
    DigitRec_control_s_axi_U->WREADY(s_axi_control_WREADY);
    DigitRec_control_s_axi_U->WDATA(s_axi_control_WDATA);
    DigitRec_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    DigitRec_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    DigitRec_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    DigitRec_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    DigitRec_control_s_axi_U->RVALID(s_axi_control_RVALID);
    DigitRec_control_s_axi_U->RREADY(s_axi_control_RREADY);
    DigitRec_control_s_axi_U->RDATA(s_axi_control_RDATA);
    DigitRec_control_s_axi_U->RRESP(s_axi_control_RRESP);
    DigitRec_control_s_axi_U->BVALID(s_axi_control_BVALID);
    DigitRec_control_s_axi_U->BREADY(s_axi_control_BREADY);
    DigitRec_control_s_axi_U->BRESP(s_axi_control_BRESP);
    DigitRec_control_s_axi_U->ACLK(ap_clk);
    DigitRec_control_s_axi_U->ARESET(ap_rst_n_inv);
    DigitRec_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    DigitRec_control_s_axi_U->ap_start(ap_start);
    DigitRec_control_s_axi_U->interrupt(interrupt);
    DigitRec_control_s_axi_U->ap_ready(ap_ready);
    DigitRec_control_s_axi_U->ap_done(ap_done);
    DigitRec_control_s_axi_U->ap_idle(ap_idle);
    DigitRec_control_s_axi_U->training_data_V(training_data_V);
    DigitRec_control_s_axi_U->testing_data_V(testing_data_V);
    DigitRec_control_s_axi_U->results_V(results_V);
    DigitRec_gmem_m_axi_U = new DigitRec_gmem_m_axi<64,64,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("DigitRec_gmem_m_axi_U");
    DigitRec_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    DigitRec_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    DigitRec_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    DigitRec_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    DigitRec_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    DigitRec_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    DigitRec_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    DigitRec_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    DigitRec_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    DigitRec_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    DigitRec_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    DigitRec_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    DigitRec_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    DigitRec_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    DigitRec_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    DigitRec_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    DigitRec_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    DigitRec_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    DigitRec_gmem_m_axi_U->WID(m_axi_gmem_WID);
    DigitRec_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    DigitRec_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    DigitRec_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    DigitRec_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    DigitRec_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    DigitRec_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    DigitRec_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    DigitRec_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    DigitRec_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    DigitRec_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    DigitRec_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    DigitRec_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    DigitRec_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    DigitRec_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    DigitRec_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    DigitRec_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    DigitRec_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    DigitRec_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    DigitRec_gmem_m_axi_U->RID(m_axi_gmem_RID);
    DigitRec_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    DigitRec_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    DigitRec_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    DigitRec_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    DigitRec_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    DigitRec_gmem_m_axi_U->BID(m_axi_gmem_BID);
    DigitRec_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    DigitRec_gmem_m_axi_U->ACLK(ap_clk);
    DigitRec_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    DigitRec_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    DigitRec_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    DigitRec_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    DigitRec_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    DigitRec_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    DigitRec_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    DigitRec_gmem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    DigitRec_gmem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    DigitRec_gmem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    DigitRec_gmem_m_axi_U->I_ARQOS(ap_var_for_const5);
    DigitRec_gmem_m_axi_U->I_ARPROT(ap_var_for_const3);
    DigitRec_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    DigitRec_gmem_m_axi_U->I_ARBURST(ap_var_for_const4);
    DigitRec_gmem_m_axi_U->I_ARREGION(ap_var_for_const5);
    DigitRec_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    DigitRec_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    DigitRec_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    DigitRec_gmem_m_axi_U->I_RID(gmem_RID);
    DigitRec_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    DigitRec_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    DigitRec_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    DigitRec_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    DigitRec_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    DigitRec_gmem_m_axi_U->I_AWADDR(gmem_addr_1_reg_668);
    DigitRec_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    DigitRec_gmem_m_axi_U->I_AWLEN(ap_var_for_const2);
    DigitRec_gmem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    DigitRec_gmem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    DigitRec_gmem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    DigitRec_gmem_m_axi_U->I_AWQOS(ap_var_for_const5);
    DigitRec_gmem_m_axi_U->I_AWPROT(ap_var_for_const3);
    DigitRec_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    DigitRec_gmem_m_axi_U->I_AWBURST(ap_var_for_const4);
    DigitRec_gmem_m_axi_U->I_AWREGION(ap_var_for_const5);
    DigitRec_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    DigitRec_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    DigitRec_gmem_m_axi_U->I_WDATA(tmp_65_reg_680);
    DigitRec_gmem_m_axi_U->I_WID(ap_var_for_const1);
    DigitRec_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    DigitRec_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    DigitRec_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    DigitRec_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    DigitRec_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    DigitRec_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    DigitRec_gmem_m_axi_U->I_BID(gmem_BID);
    DigitRec_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    knn_set_V_U = new DigitRec_knn_set_V("knn_set_V_U");
    knn_set_V_U->clk(ap_clk);
    knn_set_V_U->reset(ap_rst_n_inv);
    knn_set_V_U->address0(knn_set_V_address0);
    knn_set_V_U->ce0(knn_set_V_ce0);
    knn_set_V_U->we0(knn_set_V_we0);
    knn_set_V_U->d0(knn_set_V_d0);
    knn_set_V_U->q0(knn_set_V_q0);
    knn_set_V_U->address1(knn_set_V_address1);
    knn_set_V_U->ce1(knn_set_V_ce1);
    knn_set_V_U->we1(knn_set_V_we1);
    knn_set_V_U->d1(grp_update_knn_fu_277_min_distances_V_d1);
    knn_set_V_U->q1(knn_set_V_q1);
    grp_knn_vote_fu_272 = new knn_vote("grp_knn_vote_fu_272");
    grp_knn_vote_fu_272->ap_clk(ap_clk);
    grp_knn_vote_fu_272->ap_rst(ap_rst_n_inv);
    grp_knn_vote_fu_272->ap_start(grp_knn_vote_fu_272_ap_start);
    grp_knn_vote_fu_272->ap_done(grp_knn_vote_fu_272_ap_done);
    grp_knn_vote_fu_272->ap_idle(grp_knn_vote_fu_272_ap_idle);
    grp_knn_vote_fu_272->ap_ready(grp_knn_vote_fu_272_ap_ready);
    grp_knn_vote_fu_272->knn_set_V_address0(grp_knn_vote_fu_272_knn_set_V_address0);
    grp_knn_vote_fu_272->knn_set_V_ce0(grp_knn_vote_fu_272_knn_set_V_ce0);
    grp_knn_vote_fu_272->knn_set_V_we0(grp_knn_vote_fu_272_knn_set_V_we0);
    grp_knn_vote_fu_272->knn_set_V_d0(grp_knn_vote_fu_272_knn_set_V_d0);
    grp_knn_vote_fu_272->knn_set_V_q0(knn_set_V_q0);
    grp_knn_vote_fu_272->knn_set_V_address1(grp_knn_vote_fu_272_knn_set_V_address1);
    grp_knn_vote_fu_272->knn_set_V_ce1(grp_knn_vote_fu_272_knn_set_V_ce1);
    grp_knn_vote_fu_272->knn_set_V_q1(knn_set_V_q1);
    grp_knn_vote_fu_272->ap_return(grp_knn_vote_fu_272_ap_return);
    grp_update_knn_fu_277 = new update_knn("grp_update_knn_fu_277");
    grp_update_knn_fu_277->ap_clk(ap_clk);
    grp_update_knn_fu_277->ap_rst(ap_rst_n_inv);
    grp_update_knn_fu_277->ap_start(grp_update_knn_fu_277_ap_start);
    grp_update_knn_fu_277->ap_done(grp_update_knn_fu_277_ap_done);
    grp_update_knn_fu_277->ap_idle(grp_update_knn_fu_277_ap_idle);
    grp_update_knn_fu_277->ap_ready(grp_update_knn_fu_277_ap_ready);
    grp_update_knn_fu_277->test_inst_V(testing_instance_V_reg_591);
    grp_update_knn_fu_277->train_inst_V(training_instance_V_reg_648);
    grp_update_knn_fu_277->min_distances_V_address0(grp_update_knn_fu_277_min_distances_V_address0);
    grp_update_knn_fu_277->min_distances_V_ce0(grp_update_knn_fu_277_min_distances_V_ce0);
    grp_update_knn_fu_277->min_distances_V_q0(knn_set_V_q0);
    grp_update_knn_fu_277->min_distances_V_address1(grp_update_knn_fu_277_min_distances_V_address1);
    grp_update_knn_fu_277->min_distances_V_ce1(grp_update_knn_fu_277_min_distances_V_ce1);
    grp_update_knn_fu_277->min_distances_V_we1(grp_update_knn_fu_277_min_distances_V_we1);
    grp_update_knn_fu_277->min_distances_V_d1(grp_update_knn_fu_277_min_distances_V_d1);
    grp_update_knn_fu_277->min_distances_V_q1(knn_set_V_q1);
    grp_update_knn_fu_277->min_distances_V_offset(grp_update_knn_fu_277_min_distances_V_offset);
    grp_update_knn_fu_277->ap_ce(grp_update_knn_fu_277_ap_ce);
    DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7 = new DigitRec_mac_muladd_4ns_12ns_11ns_15_1<1,1,4,12,11,15>("DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7");
    DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7->din0(grp_fu_549_p0);
    DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7->din1(grp_fu_549_p1);
    DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7->din2(grp_fu_549_p2);
    DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7->dout(grp_fu_549_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage1);

    SC_METHOD(thread_ap_block_pp1_stage1_11001);

    SC_METHOD(thread_ap_block_pp1_stage1_subdone);

    SC_METHOD(thread_ap_block_pp1_stage2);

    SC_METHOD(thread_ap_block_pp1_stage2_11001);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage2_subdone);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage3);

    SC_METHOD(thread_ap_block_pp1_stage3_01001);

    SC_METHOD(thread_ap_block_pp1_stage3_11001);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_pp1_stage3_subdone);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_state13_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state14_pp1_stage1_iter0);

    SC_METHOD(thread_ap_block_state15_pp1_stage2_iter0);

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_block_state16_pp1_stage3_iter0);

    SC_METHOD(thread_ap_block_state17_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state18_pp1_stage1_iter1);

    SC_METHOD(thread_ap_block_state19_pp1_stage2_iter1);

    SC_METHOD(thread_ap_block_state20_pp1_stage3_iter1);

    SC_METHOD(thread_ap_block_state21_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state22_pp1_stage1_iter2);

    SC_METHOD(thread_ap_block_state23_pp1_stage2_iter2);
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state24_pp1_stage3_iter2);

    SC_METHOD(thread_ap_block_state25_pp1_stage0_iter3);

    SC_METHOD(thread_ap_block_state26_pp1_stage1_iter3);

    SC_METHOD(thread_ap_block_state27_pp1_stage2_iter3);

    SC_METHOD(thread_ap_condition_615);
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( ap_block_pp1_stage3_01001 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state13);
    sensitive << ( exitcond_flatten_fu_375_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond6_fu_327_p2 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond6_fu_327_p2 );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_exitcond6_fu_327_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_reg_216 );

    SC_METHOD(thread_exitcond7_fu_358_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( i_reg_228 );

    SC_METHOD(thread_exitcond_flatten_fu_375_p2);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( indvar_flatten_phi_fu_243_p4 );

    SC_METHOD(thread_exitcond_fu_387_p2);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten_fu_375_p2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( j_phi_fu_265_p4 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( testing_data_V4_sum_cast_fu_348_p1 );
    sensitive << ( training_data_V2_sum_cast_fu_429_p1 );
    sensitive << ( results_V6_sum_cast_fu_495_p1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_condition_615 );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_block_pp1_stage3_01001 );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( grp_knn_vote_fu_272_ap_done );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_pp1_stage2_11001 );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage3 );
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_state29 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_grp_fu_549_p0);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( grp_fu_549_p00 );

    SC_METHOD(thread_grp_fu_549_p00);
    sensitive << ( j_mid2_reg_613 );

    SC_METHOD(thread_grp_fu_549_p1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );

    SC_METHOD(thread_grp_fu_549_p2);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( grp_fu_549_p20 );

    SC_METHOD(thread_grp_fu_549_p20);
    sensitive << ( i1_cast4_mid2_v_reg_621 );

    SC_METHOD(thread_grp_knn_vote_fu_272_ap_start);
    sensitive << ( ap_reg_grp_knn_vote_fu_272_ap_start );

    SC_METHOD(thread_grp_update_knn_fu_277_ap_ce);
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_reg_pp1_iter3_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_block_pp1_stage2_11001 );
    sensitive << ( ap_block_pp1_stage3_11001 );

    SC_METHOD(thread_grp_update_knn_fu_277_ap_start);
    sensitive << ( ap_reg_grp_update_knn_fu_277_ap_start );

    SC_METHOD(thread_grp_update_knn_fu_277_min_distances_V_offset);
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_block_pp1_stage3 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( tmp_13_cast_fu_464_p1 );

    SC_METHOD(thread_i1_cast4_mid2_v_fu_407_p3);
    sensitive << ( i1_phi_fu_254_p4 );
    sensitive << ( exitcond_fu_387_p2 );
    sensitive << ( i_s_fu_401_p2 );

    SC_METHOD(thread_i1_phi_fu_254_p4);
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( i1_reg_250 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i1_cast4_mid2_v_reg_621 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_i_3_fu_364_p2);
    sensitive << ( i_reg_228 );

    SC_METHOD(thread_i_s_fu_401_p2);
    sensitive << ( i1_phi_fu_254_p4 );

    SC_METHOD(thread_indvar_flatten_next_fu_381_p2);
    sensitive << ( indvar_flatten_phi_fu_243_p4 );

    SC_METHOD(thread_indvar_flatten_phi_fu_243_p4);
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( indvar_flatten_reg_239 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( indvar_flatten_next_reg_608 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_j_1_fu_439_p2);
    sensitive << ( j_mid2_reg_613 );

    SC_METHOD(thread_j_cast2_fu_444_p1);
    sensitive << ( ap_reg_pp1_iter2_j_mid2_reg_613 );

    SC_METHOD(thread_j_mid2_fu_393_p3);
    sensitive << ( j_phi_fu_265_p4 );
    sensitive << ( exitcond_fu_387_p2 );

    SC_METHOD(thread_j_phi_fu_265_p4);
    sensitive << ( exitcond_flatten_reg_604 );
    sensitive << ( j_reg_261 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( j_1_reg_643 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_k_2_fu_333_p2);
    sensitive << ( k_reg_216 );

    SC_METHOD(thread_knn_set_V_address0);
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_block_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_reg_pp1_iter3_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( grp_knn_vote_fu_272_knn_set_V_address0 );
    sensitive << ( grp_update_knn_fu_277_min_distances_V_address0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( tmp_s_fu_370_p1 );

    SC_METHOD(thread_knn_set_V_address1);
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_block_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_reg_pp1_iter3_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( grp_knn_vote_fu_272_knn_set_V_address1 );
    sensitive << ( grp_update_knn_fu_277_min_distances_V_address1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage1 );

    SC_METHOD(thread_knn_set_V_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_reg_pp1_iter3_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_block_pp1_stage2_11001 );
    sensitive << ( ap_block_pp1_stage3_11001 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( grp_knn_vote_fu_272_knn_set_V_ce0 );
    sensitive << ( grp_update_knn_fu_277_min_distances_V_ce0 );

    SC_METHOD(thread_knn_set_V_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_reg_pp1_iter3_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_block_pp1_stage2_11001 );
    sensitive << ( ap_block_pp1_stage3_11001 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( grp_knn_vote_fu_272_knn_set_V_ce1 );
    sensitive << ( grp_update_knn_fu_277_min_distances_V_ce1 );

    SC_METHOD(thread_knn_set_V_d0);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_knn_vote_fu_272_knn_set_V_d0 );

    SC_METHOD(thread_knn_set_V_we0);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_knn_vote_fu_272_knn_set_V_we0 );
    sensitive << ( exitcond7_fu_358_p2 );

    SC_METHOD(thread_knn_set_V_we1);
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_reg_pp1_iter2_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_reg_pp1_iter3_exitcond_flatten_reg_604 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_block_pp1_stage2_11001 );
    sensitive << ( ap_block_pp1_stage3_11001 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( grp_update_knn_fu_277_min_distances_V_we1 );

    SC_METHOD(thread_p_shl_cast_fu_454_p1);
    sensitive << ( p_shl_fu_447_p3 );

    SC_METHOD(thread_p_shl_fu_447_p3);
    sensitive << ( ap_reg_pp1_iter2_j_mid2_reg_613 );

    SC_METHOD(thread_results_V6_sum_cast_fu_495_p1);
    sensitive << ( results_V6_sum_reg_658 );

    SC_METHOD(thread_results_V6_sum_fu_486_p2);
    sensitive << ( tmp_47_cast_reg_557 );
    sensitive << ( tmp1_cast_fu_482_p1 );

    SC_METHOD(thread_testing_data_V4_sum_cast_fu_348_p1);
    sensitive << ( testing_data_V4_sum_reg_580 );

    SC_METHOD(thread_testing_data_V4_sum_fu_343_p2);
    sensitive << ( tmp_48_cast_reg_562 );
    sensitive << ( tmp_cast_fu_339_p1 );

    SC_METHOD(thread_tmp1_cast_fu_482_p1);
    sensitive << ( tmp_56_fu_472_p4 );

    SC_METHOD(thread_tmp_13_cast_fu_464_p1);
    sensitive << ( tmp_6_reg_653 );

    SC_METHOD(thread_tmp_47_cast_fu_295_p1);
    sensitive << ( tmp_fu_285_p4 );

    SC_METHOD(thread_tmp_48_cast_fu_309_p1);
    sensitive << ( tmp_54_fu_299_p4 );

    SC_METHOD(thread_tmp_49_cast_fu_323_p1);
    sensitive << ( tmp_55_fu_313_p4 );

    SC_METHOD(thread_tmp_54_fu_299_p4);
    sensitive << ( testing_data_V );

    SC_METHOD(thread_tmp_55_fu_313_p4);
    sensitive << ( training_data_V );

    SC_METHOD(thread_tmp_56_fu_472_p4);
    sensitive << ( k_reg_216 );

    SC_METHOD(thread_tmp_57_fu_491_p1);
    sensitive << ( k_reg_216 );

    SC_METHOD(thread_tmp_58_fu_505_p3);
    sensitive << ( tmp_57_reg_663 );

    SC_METHOD(thread_tmp_59_fu_512_p1);
    sensitive << ( tmp_58_fu_505_p3 );

    SC_METHOD(thread_tmp_5_cast_fu_421_p1);
    sensitive << ( tmp_4_reg_627 );

    SC_METHOD(thread_tmp_60_fu_516_p2);
    sensitive << ( tmp_59_fu_512_p1 );

    SC_METHOD(thread_tmp_61_fu_522_p2);
    sensitive << ( tmp_60_fu_516_p2 );

    SC_METHOD(thread_tmp_62_fu_528_p2);
    sensitive << ( gmem_addr_1_read_reg_675 );
    sensitive << ( tmp_61_fu_522_p2 );

    SC_METHOD(thread_tmp_63_fu_533_p1);
    sensitive << ( grp_knn_vote_fu_272_ap_return );

    SC_METHOD(thread_tmp_64_fu_537_p2);
    sensitive << ( tmp_59_fu_512_p1 );
    sensitive << ( tmp_63_fu_533_p1 );

    SC_METHOD(thread_tmp_65_fu_543_p2);
    sensitive << ( tmp_62_fu_528_p2 );
    sensitive << ( tmp_64_fu_537_p2 );

    SC_METHOD(thread_tmp_6_fu_458_p2);
    sensitive << ( p_shl_cast_fu_454_p1 );
    sensitive << ( j_cast2_fu_444_p1 );

    SC_METHOD(thread_tmp_cast_fu_339_p1);
    sensitive << ( k_reg_216 );

    SC_METHOD(thread_tmp_fu_285_p4);
    sensitive << ( results_V );

    SC_METHOD(thread_tmp_s_fu_370_p1);
    sensitive << ( i_reg_228 );

    SC_METHOD(thread_training_data_V2_sum_cast_fu_429_p1);
    sensitive << ( training_data_V2_sum_reg_632 );

    SC_METHOD(thread_training_data_V2_sum_fu_424_p2);
    sensitive << ( tmp_49_cast_reg_567 );
    sensitive << ( tmp_5_cast_fu_421_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond6_fu_327_p2 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_flatten_fu_375_p2 );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( grp_knn_vote_fu_272_ap_done );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage3_subdone );
    sensitive << ( ap_block_pp1_stage2_subdone );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( exitcond7_fu_358_p2 );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );
    sensitive << ( ap_block_pp1_stage1_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const7);

    ap_rst_n_inv = SC_LOGIC_1;
    ap_CS_fsm = "00000000000000000000000000000001";
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter3 = SC_LOGIC_0;
    ap_reg_grp_knn_vote_fu_272_ap_start = SC_LOGIC_0;
    ap_reg_grp_update_knn_fu_277_ap_start = SC_LOGIC_0;
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "DigitRec_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, training_data_V, "training_data_V");
    sc_trace(mVcdFile, testing_data_V, "testing_data_V");
    sc_trace(mVcdFile, results_V, "results_V");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage3, "ap_CS_fsm_pp1_stage3");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage3, "ap_block_pp1_stage3");
    sc_trace(mVcdFile, exitcond_flatten_reg_604, "exitcond_flatten_reg_604");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage2, "ap_CS_fsm_pp1_stage2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage2, "ap_block_pp1_stage2");
    sc_trace(mVcdFile, ap_reg_pp1_iter2_exitcond_flatten_reg_604, "ap_reg_pp1_iter2_exitcond_flatten_reg_604");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, indvar_flatten_reg_239, "indvar_flatten_reg_239");
    sc_trace(mVcdFile, i1_reg_250, "i1_reg_250");
    sc_trace(mVcdFile, j_reg_261, "j_reg_261");
    sc_trace(mVcdFile, tmp_47_cast_fu_295_p1, "tmp_47_cast_fu_295_p1");
    sc_trace(mVcdFile, tmp_47_cast_reg_557, "tmp_47_cast_reg_557");
    sc_trace(mVcdFile, tmp_48_cast_fu_309_p1, "tmp_48_cast_fu_309_p1");
    sc_trace(mVcdFile, tmp_48_cast_reg_562, "tmp_48_cast_reg_562");
    sc_trace(mVcdFile, tmp_49_cast_fu_323_p1, "tmp_49_cast_fu_323_p1");
    sc_trace(mVcdFile, tmp_49_cast_reg_567, "tmp_49_cast_reg_567");
    sc_trace(mVcdFile, k_2_fu_333_p2, "k_2_fu_333_p2");
    sc_trace(mVcdFile, k_2_reg_575, "k_2_reg_575");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, testing_data_V4_sum_fu_343_p2, "testing_data_V4_sum_fu_343_p2");
    sc_trace(mVcdFile, testing_data_V4_sum_reg_580, "testing_data_V4_sum_reg_580");
    sc_trace(mVcdFile, exitcond6_fu_327_p2, "exitcond6_fu_327_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, testing_instance_V_reg_591, "testing_instance_V_reg_591");
    sc_trace(mVcdFile, i_3_fu_364_p2, "i_3_fu_364_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, exitcond_flatten_fu_375_p2, "exitcond_flatten_fu_375_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state13_pp1_stage0_iter0, "ap_block_state13_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state17_pp1_stage0_iter1, "ap_block_state17_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state21_pp1_stage0_iter2, "ap_block_state21_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state25_pp1_stage0_iter3, "ap_block_state25_pp1_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, ap_reg_pp1_iter1_exitcond_flatten_reg_604, "ap_reg_pp1_iter1_exitcond_flatten_reg_604");
    sc_trace(mVcdFile, ap_reg_pp1_iter3_exitcond_flatten_reg_604, "ap_reg_pp1_iter3_exitcond_flatten_reg_604");
    sc_trace(mVcdFile, indvar_flatten_next_fu_381_p2, "indvar_flatten_next_fu_381_p2");
    sc_trace(mVcdFile, indvar_flatten_next_reg_608, "indvar_flatten_next_reg_608");
    sc_trace(mVcdFile, j_mid2_fu_393_p3, "j_mid2_fu_393_p3");
    sc_trace(mVcdFile, j_mid2_reg_613, "j_mid2_reg_613");
    sc_trace(mVcdFile, ap_reg_pp1_iter1_j_mid2_reg_613, "ap_reg_pp1_iter1_j_mid2_reg_613");
    sc_trace(mVcdFile, ap_reg_pp1_iter2_j_mid2_reg_613, "ap_reg_pp1_iter2_j_mid2_reg_613");
    sc_trace(mVcdFile, i1_cast4_mid2_v_fu_407_p3, "i1_cast4_mid2_v_fu_407_p3");
    sc_trace(mVcdFile, i1_cast4_mid2_v_reg_621, "i1_cast4_mid2_v_reg_621");
    sc_trace(mVcdFile, grp_fu_549_p3, "grp_fu_549_p3");
    sc_trace(mVcdFile, tmp_4_reg_627, "tmp_4_reg_627");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage1, "ap_CS_fsm_pp1_stage1");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage1_iter0, "ap_block_state14_pp1_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state18_pp1_stage1_iter1, "ap_block_state18_pp1_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state22_pp1_stage1_iter2, "ap_block_state22_pp1_stage1_iter2");
    sc_trace(mVcdFile, ap_block_state26_pp1_stage1_iter3, "ap_block_state26_pp1_stage1_iter3");
    sc_trace(mVcdFile, ap_block_pp1_stage1_11001, "ap_block_pp1_stage1_11001");
    sc_trace(mVcdFile, training_data_V2_sum_fu_424_p2, "training_data_V2_sum_fu_424_p2");
    sc_trace(mVcdFile, training_data_V2_sum_reg_632, "training_data_V2_sum_reg_632");
    sc_trace(mVcdFile, ap_block_state15_pp1_stage2_iter0, "ap_block_state15_pp1_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state19_pp1_stage2_iter1, "ap_block_state19_pp1_stage2_iter1");
    sc_trace(mVcdFile, ap_block_state23_pp1_stage2_iter2, "ap_block_state23_pp1_stage2_iter2");
    sc_trace(mVcdFile, ap_block_state27_pp1_stage2_iter3, "ap_block_state27_pp1_stage2_iter3");
    sc_trace(mVcdFile, ap_block_pp1_stage2_11001, "ap_block_pp1_stage2_11001");
    sc_trace(mVcdFile, ap_block_state16_pp1_stage3_iter0, "ap_block_state16_pp1_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, ap_block_state20_pp1_stage3_iter1, "ap_block_state20_pp1_stage3_iter1");
    sc_trace(mVcdFile, ap_block_state24_pp1_stage3_iter2, "ap_block_state24_pp1_stage3_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage3_11001, "ap_block_pp1_stage3_11001");
    sc_trace(mVcdFile, j_1_fu_439_p2, "j_1_fu_439_p2");
    sc_trace(mVcdFile, j_1_reg_643, "j_1_reg_643");
    sc_trace(mVcdFile, training_instance_V_reg_648, "training_instance_V_reg_648");
    sc_trace(mVcdFile, tmp_6_fu_458_p2, "tmp_6_fu_458_p2");
    sc_trace(mVcdFile, tmp_6_reg_653, "tmp_6_reg_653");
    sc_trace(mVcdFile, results_V6_sum_fu_486_p2, "results_V6_sum_fu_486_p2");
    sc_trace(mVcdFile, results_V6_sum_reg_658, "results_V6_sum_reg_658");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, tmp_57_fu_491_p1, "tmp_57_fu_491_p1");
    sc_trace(mVcdFile, tmp_57_reg_663, "tmp_57_reg_663");
    sc_trace(mVcdFile, gmem_addr_1_reg_668, "gmem_addr_1_reg_668");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_675, "gmem_addr_1_read_reg_675");
    sc_trace(mVcdFile, tmp_65_fu_543_p2, "tmp_65_fu_543_p2");
    sc_trace(mVcdFile, tmp_65_reg_680, "tmp_65_reg_680");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_ap_done, "grp_knn_vote_fu_272_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state13, "ap_condition_pp1_exit_iter0_state13");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage3_subdone, "ap_block_pp1_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage2_subdone, "ap_block_pp1_stage2_subdone");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter3, "ap_enable_reg_pp1_iter3");
    sc_trace(mVcdFile, knn_set_V_address0, "knn_set_V_address0");
    sc_trace(mVcdFile, knn_set_V_ce0, "knn_set_V_ce0");
    sc_trace(mVcdFile, knn_set_V_we0, "knn_set_V_we0");
    sc_trace(mVcdFile, knn_set_V_d0, "knn_set_V_d0");
    sc_trace(mVcdFile, knn_set_V_q0, "knn_set_V_q0");
    sc_trace(mVcdFile, knn_set_V_address1, "knn_set_V_address1");
    sc_trace(mVcdFile, knn_set_V_ce1, "knn_set_V_ce1");
    sc_trace(mVcdFile, knn_set_V_we1, "knn_set_V_we1");
    sc_trace(mVcdFile, knn_set_V_q1, "knn_set_V_q1");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_ap_start, "grp_knn_vote_fu_272_ap_start");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_ap_idle, "grp_knn_vote_fu_272_ap_idle");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_ap_ready, "grp_knn_vote_fu_272_ap_ready");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_knn_set_V_address0, "grp_knn_vote_fu_272_knn_set_V_address0");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_knn_set_V_ce0, "grp_knn_vote_fu_272_knn_set_V_ce0");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_knn_set_V_we0, "grp_knn_vote_fu_272_knn_set_V_we0");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_knn_set_V_d0, "grp_knn_vote_fu_272_knn_set_V_d0");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_knn_set_V_address1, "grp_knn_vote_fu_272_knn_set_V_address1");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_knn_set_V_ce1, "grp_knn_vote_fu_272_knn_set_V_ce1");
    sc_trace(mVcdFile, grp_knn_vote_fu_272_ap_return, "grp_knn_vote_fu_272_ap_return");
    sc_trace(mVcdFile, grp_update_knn_fu_277_ap_start, "grp_update_knn_fu_277_ap_start");
    sc_trace(mVcdFile, grp_update_knn_fu_277_ap_done, "grp_update_knn_fu_277_ap_done");
    sc_trace(mVcdFile, grp_update_knn_fu_277_ap_idle, "grp_update_knn_fu_277_ap_idle");
    sc_trace(mVcdFile, grp_update_knn_fu_277_ap_ready, "grp_update_knn_fu_277_ap_ready");
    sc_trace(mVcdFile, grp_update_knn_fu_277_min_distances_V_address0, "grp_update_knn_fu_277_min_distances_V_address0");
    sc_trace(mVcdFile, grp_update_knn_fu_277_min_distances_V_ce0, "grp_update_knn_fu_277_min_distances_V_ce0");
    sc_trace(mVcdFile, grp_update_knn_fu_277_min_distances_V_address1, "grp_update_knn_fu_277_min_distances_V_address1");
    sc_trace(mVcdFile, grp_update_knn_fu_277_min_distances_V_ce1, "grp_update_knn_fu_277_min_distances_V_ce1");
    sc_trace(mVcdFile, grp_update_knn_fu_277_min_distances_V_we1, "grp_update_knn_fu_277_min_distances_V_we1");
    sc_trace(mVcdFile, grp_update_knn_fu_277_min_distances_V_d1, "grp_update_knn_fu_277_min_distances_V_d1");
    sc_trace(mVcdFile, grp_update_knn_fu_277_min_distances_V_offset, "grp_update_knn_fu_277_min_distances_V_offset");
    sc_trace(mVcdFile, grp_update_knn_fu_277_ap_ce, "grp_update_knn_fu_277_ap_ce");
    sc_trace(mVcdFile, k_reg_216, "k_reg_216");
    sc_trace(mVcdFile, i_reg_228, "i_reg_228");
    sc_trace(mVcdFile, exitcond7_fu_358_p2, "exitcond7_fu_358_p2");
    sc_trace(mVcdFile, indvar_flatten_phi_fu_243_p4, "indvar_flatten_phi_fu_243_p4");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, i1_phi_fu_254_p4, "i1_phi_fu_254_p4");
    sc_trace(mVcdFile, j_phi_fu_265_p4, "j_phi_fu_265_p4");
    sc_trace(mVcdFile, ap_reg_grp_knn_vote_fu_272_ap_start, "ap_reg_grp_knn_vote_fu_272_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_update_knn_fu_277_ap_start, "ap_reg_grp_update_knn_fu_277_ap_start");
    sc_trace(mVcdFile, ap_block_pp1_stage1, "ap_block_pp1_stage1");
    sc_trace(mVcdFile, tmp_s_fu_370_p1, "tmp_s_fu_370_p1");
    sc_trace(mVcdFile, testing_data_V4_sum_cast_fu_348_p1, "testing_data_V4_sum_cast_fu_348_p1");
    sc_trace(mVcdFile, training_data_V2_sum_cast_fu_429_p1, "training_data_V2_sum_cast_fu_429_p1");
    sc_trace(mVcdFile, results_V6_sum_cast_fu_495_p1, "results_V6_sum_cast_fu_495_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_block_pp1_stage3_01001, "ap_block_pp1_stage3_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, tmp_fu_285_p4, "tmp_fu_285_p4");
    sc_trace(mVcdFile, tmp_54_fu_299_p4, "tmp_54_fu_299_p4");
    sc_trace(mVcdFile, tmp_55_fu_313_p4, "tmp_55_fu_313_p4");
    sc_trace(mVcdFile, tmp_cast_fu_339_p1, "tmp_cast_fu_339_p1");
    sc_trace(mVcdFile, exitcond_fu_387_p2, "exitcond_fu_387_p2");
    sc_trace(mVcdFile, i_s_fu_401_p2, "i_s_fu_401_p2");
    sc_trace(mVcdFile, tmp_5_cast_fu_421_p1, "tmp_5_cast_fu_421_p1");
    sc_trace(mVcdFile, p_shl_fu_447_p3, "p_shl_fu_447_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_454_p1, "p_shl_cast_fu_454_p1");
    sc_trace(mVcdFile, j_cast2_fu_444_p1, "j_cast2_fu_444_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_464_p1, "tmp_13_cast_fu_464_p1");
    sc_trace(mVcdFile, tmp_56_fu_472_p4, "tmp_56_fu_472_p4");
    sc_trace(mVcdFile, tmp1_cast_fu_482_p1, "tmp1_cast_fu_482_p1");
    sc_trace(mVcdFile, tmp_58_fu_505_p3, "tmp_58_fu_505_p3");
    sc_trace(mVcdFile, tmp_59_fu_512_p1, "tmp_59_fu_512_p1");
    sc_trace(mVcdFile, tmp_60_fu_516_p2, "tmp_60_fu_516_p2");
    sc_trace(mVcdFile, tmp_61_fu_522_p2, "tmp_61_fu_522_p2");
    sc_trace(mVcdFile, tmp_63_fu_533_p1, "tmp_63_fu_533_p1");
    sc_trace(mVcdFile, tmp_62_fu_528_p2, "tmp_62_fu_528_p2");
    sc_trace(mVcdFile, tmp_64_fu_537_p2, "tmp_64_fu_537_p2");
    sc_trace(mVcdFile, grp_fu_549_p0, "grp_fu_549_p0");
    sc_trace(mVcdFile, grp_fu_549_p1, "grp_fu_549_p1");
    sc_trace(mVcdFile, grp_fu_549_p2, "grp_fu_549_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp1_stage1_subdone, "ap_block_pp1_stage1_subdone");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, grp_fu_549_p00, "grp_fu_549_p00");
    sc_trace(mVcdFile, grp_fu_549_p20, "grp_fu_549_p20");
    sc_trace(mVcdFile, ap_condition_615, "ap_condition_615");
#endif

    }
    mHdltvinHandle.open("DigitRec.hdltvin.dat");
    mHdltvoutHandle.open("DigitRec.hdltvout.dat");
}

DigitRec::~DigitRec() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete DigitRec_control_s_axi_U;
    delete DigitRec_gmem_m_axi_U;
    delete knn_set_V_U;
    delete grp_knn_vote_fu_272;
    delete grp_update_knn_fu_277;
    delete DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7;
}

void DigitRec::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void DigitRec::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void DigitRec::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void DigitRec::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void DigitRec::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void DigitRec::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void DigitRec::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void DigitRec::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv8_FF;
}

void DigitRec::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage3_subdone.read(), ap_const_boolean_0))) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state13.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage3_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter3 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage3_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp1_iter3 = ap_enable_reg_pp1_iter2.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter3 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_knn_vote_fu_272_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
             esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
            ap_reg_grp_knn_vote_fu_272_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_knn_vote_fu_272_ap_ready.read())) {
            ap_reg_grp_knn_vote_fu_272_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_update_knn_fu_277_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0))) {
            ap_reg_grp_update_knn_fu_277_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_update_knn_fu_277_ap_ready.read())) {
            ap_reg_grp_update_knn_fu_277_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
              esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage3_11001.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                     esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp1_stage3_01001.read(), ap_const_boolean_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_knn_vote_fu_272_ap_done.read()))) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read()) && 
                        esl_seteq<1,1,1>(grp_knn_vote_fu_272_ap_done.read(), ap_const_logic_1))) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read())) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i1_reg_250 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        i1_reg_250 = i1_cast4_mid2_v_reg_621.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_358_p2.read()))) {
        i_reg_228 = i_3_fu_364_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        i_reg_228 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        indvar_flatten_reg_239 = ap_const_lv15_0;
    } else if ((esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        indvar_flatten_reg_239 = indvar_flatten_next_reg_608.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        j_reg_261 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        j_reg_261 = j_1_reg_643.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_reg_216 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
                esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        k_reg_216 = k_2_reg_575.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp1_iter1_exitcond_flatten_reg_604 = exitcond_flatten_reg_604.read();
        ap_reg_pp1_iter1_j_mid2_reg_613 = j_mid2_reg_613.read();
        ap_reg_pp1_iter2_exitcond_flatten_reg_604 = ap_reg_pp1_iter1_exitcond_flatten_reg_604.read();
        ap_reg_pp1_iter2_j_mid2_reg_613 = ap_reg_pp1_iter1_j_mid2_reg_613.read();
        ap_reg_pp1_iter3_exitcond_flatten_reg_604 = ap_reg_pp1_iter2_exitcond_flatten_reg_604.read();
        exitcond_flatten_reg_604 = exitcond_flatten_fu_375_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        gmem_addr_1_read_reg_675 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
        gmem_addr_1_reg_668 = results_V6_sum_cast_fu_495_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_375_p2.read()))) {
        i1_cast4_mid2_v_reg_621 = i1_cast4_mid2_v_fu_407_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_next_reg_608 = indvar_flatten_next_fu_381_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp1_stage3_11001.read(), ap_const_boolean_0))) {
        j_1_reg_643 = j_1_fu_439_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_375_p2.read()))) {
        j_mid2_reg_613 = j_mid2_fu_393_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_2_reg_575 = k_2_fu_333_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        results_V6_sum_reg_658 = results_V6_sum_fu_486_p2.read();
        tmp_57_reg_663 = tmp_57_fu_491_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_327_p2.read()))) {
        testing_data_V4_sum_reg_580 = testing_data_V4_sum_fu_343_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        testing_instance_V_reg_591 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_47_cast_reg_557 = tmp_47_cast_fu_295_p1.read();
        tmp_48_cast_reg_562 = tmp_48_cast_fu_309_p1.read();
        tmp_49_cast_reg_567 = tmp_49_cast_fu_323_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0))) {
        tmp_4_reg_627 = grp_fu_549_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_knn_vote_fu_272_ap_done.read())))) {
        tmp_65_reg_680 = tmp_65_fu_543_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0))) {
        tmp_6_reg_653 = tmp_6_fu_458_p2.read();
        training_instance_V_reg_648 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0))) {
        training_data_V2_sum_reg_632 = training_data_V2_sum_fu_424_p2.read();
    }
}

void DigitRec::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[12];
}

void DigitRec::thread_ap_CS_fsm_pp1_stage1() {
    ap_CS_fsm_pp1_stage1 = ap_CS_fsm.read()[13];
}

void DigitRec::thread_ap_CS_fsm_pp1_stage2() {
    ap_CS_fsm_pp1_stage2 = ap_CS_fsm.read()[14];
}

void DigitRec::thread_ap_CS_fsm_pp1_stage3() {
    ap_CS_fsm_pp1_stage3 = ap_CS_fsm.read()[15];
}

void DigitRec::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void DigitRec::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void DigitRec::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void DigitRec::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void DigitRec::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void DigitRec::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[16];
}

void DigitRec::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[17];
}

void DigitRec::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void DigitRec::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[24];
}

void DigitRec::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[25];
}

void DigitRec::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[26];
}

void DigitRec::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[31];
}

void DigitRec::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage1() {
    ap_block_pp1_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage1_11001() {
    ap_block_pp1_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage1_subdone() {
    ap_block_pp1_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage2() {
    ap_block_pp1_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage2_11001() {
    ap_block_pp1_stage2_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void DigitRec::thread_ap_block_pp1_stage2_subdone() {
    ap_block_pp1_stage2_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void DigitRec::thread_ap_block_pp1_stage3() {
    ap_block_pp1_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage3_01001() {
    ap_block_pp1_stage3_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_pp1_stage3_11001() {
    ap_block_pp1_stage3_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()));
}

void DigitRec::thread_ap_block_pp1_stage3_subdone() {
    ap_block_pp1_stage3_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()));
}

void DigitRec::thread_ap_block_state13_pp1_stage0_iter0() {
    ap_block_state13_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state14_pp1_stage1_iter0() {
    ap_block_state14_pp1_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state15_pp1_stage2_iter0() {
    ap_block_state15_pp1_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state16_io() {
    ap_block_state16_io = (esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read()));
}

void DigitRec::thread_ap_block_state16_pp1_stage3_iter0() {
    ap_block_state16_pp1_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state17_pp1_stage0_iter1() {
    ap_block_state17_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state18_pp1_stage1_iter1() {
    ap_block_state18_pp1_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state19_pp1_stage2_iter1() {
    ap_block_state19_pp1_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state20_pp1_stage3_iter1() {
    ap_block_state20_pp1_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state21_pp1_stage0_iter2() {
    ap_block_state21_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state22_pp1_stage1_iter2() {
    ap_block_state22_pp1_stage1_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state23_pp1_stage2_iter2() {
    ap_block_state23_pp1_stage2_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void DigitRec::thread_ap_block_state24_pp1_stage3_iter2() {
    ap_block_state24_pp1_stage3_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state25_pp1_stage0_iter3() {
    ap_block_state25_pp1_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state26_pp1_stage1_iter3() {
    ap_block_state26_pp1_stage1_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_block_state27_pp1_stage2_iter3() {
    ap_block_state27_pp1_stage2_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void DigitRec::thread_ap_condition_615() {
    ap_condition_615 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp1_stage3_01001.read(), ap_const_boolean_0));
}

void DigitRec::thread_ap_condition_pp1_exit_iter0_state13() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_375_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_0;
    }
}

void DigitRec::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond6_fu_327_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void DigitRec::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void DigitRec::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void DigitRec::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter3.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void DigitRec::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond6_fu_327_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void DigitRec::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void DigitRec::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void DigitRec::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void DigitRec::thread_exitcond6_fu_327_p2() {
    exitcond6_fu_327_p2 = (!k_reg_216.read().is_01() || !ap_const_lv8_B4.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_216.read() == ap_const_lv8_B4);
}

void DigitRec::thread_exitcond7_fu_358_p2() {
    exitcond7_fu_358_p2 = (!i_reg_228.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_228.read() == ap_const_lv5_1E);
}

void DigitRec::thread_exitcond_flatten_fu_375_p2() {
    exitcond_flatten_fu_375_p2 = (!indvar_flatten_phi_fu_243_p4.read().is_01() || !ap_const_lv15_4650.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_phi_fu_243_p4.read() == ap_const_lv15_4650);
}

void DigitRec::thread_exitcond_fu_387_p2() {
    exitcond_fu_387_p2 = (!j_phi_fu_265_p4.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(j_phi_fu_265_p4.read() == ap_const_lv4_A);
}

void DigitRec::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
            gmem_ARADDR = results_V6_sum_cast_fu_495_p1.read();
        } else if (esl_seteq<1,1,1>(ap_condition_615.read(), ap_const_boolean_1)) {
            gmem_ARADDR = training_data_V2_sum_cast_fu_429_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            gmem_ARADDR = testing_data_V4_sum_cast_fu_348_p1.read();
        } else {
            gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void DigitRec::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage3_01001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void DigitRec::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
         esl_seteq<1,1,1>(grp_knn_vote_fu_272_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void DigitRec::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void DigitRec::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void DigitRec::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void DigitRec::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage3.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void DigitRec::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void DigitRec::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void DigitRec::thread_gmem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void DigitRec::thread_gmem_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void DigitRec::thread_grp_fu_549_p0() {
    grp_fu_549_p0 =  (sc_lv<4>) (grp_fu_549_p00.read());
}

void DigitRec::thread_grp_fu_549_p00() {
    grp_fu_549_p00 = esl_zext<15,4>(j_mid2_reg_613.read());
}

void DigitRec::thread_grp_fu_549_p1() {
    grp_fu_549_p1 =  (sc_lv<12>) (ap_const_lv15_708);
}

void DigitRec::thread_grp_fu_549_p2() {
    grp_fu_549_p2 =  (sc_lv<11>) (grp_fu_549_p20.read());
}

void DigitRec::thread_grp_fu_549_p20() {
    grp_fu_549_p20 = esl_zext<15,11>(i1_cast4_mid2_v_reg_621.read());
}

void DigitRec::thread_grp_knn_vote_fu_272_ap_start() {
    grp_knn_vote_fu_272_ap_start = ap_reg_grp_knn_vote_fu_272_ap_start.read();
}

void DigitRec::thread_grp_update_knn_fu_277_ap_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read())))) {
        grp_update_knn_fu_277_ap_ce = ap_const_logic_1;
    } else {
        grp_update_knn_fu_277_ap_ce = ap_const_logic_0;
    }
}

void DigitRec::thread_grp_update_knn_fu_277_ap_start() {
    grp_update_knn_fu_277_ap_start = ap_reg_grp_update_knn_fu_277_ap_start.read();
}

void DigitRec::thread_grp_update_knn_fu_277_min_distances_V_offset() {
    grp_update_knn_fu_277_min_distances_V_offset = esl_zext<64,32>(tmp_13_cast_fu_464_p1.read());
}

void DigitRec::thread_i1_cast4_mid2_v_fu_407_p3() {
    i1_cast4_mid2_v_fu_407_p3 = (!exitcond_fu_387_p2.read()[0].is_01())? sc_lv<11>(): ((exitcond_fu_387_p2.read()[0].to_bool())? i_s_fu_401_p2.read(): i1_phi_fu_254_p4.read());
}

void DigitRec::thread_i1_phi_fu_254_p4() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        i1_phi_fu_254_p4 = i1_cast4_mid2_v_reg_621.read();
    } else {
        i1_phi_fu_254_p4 = i1_reg_250.read();
    }
}

void DigitRec::thread_i_3_fu_364_p2() {
    i_3_fu_364_p2 = (!i_reg_228.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_228.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void DigitRec::thread_i_s_fu_401_p2() {
    i_s_fu_401_p2 = (!i1_phi_fu_254_p4.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i1_phi_fu_254_p4.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void DigitRec::thread_indvar_flatten_next_fu_381_p2() {
    indvar_flatten_next_fu_381_p2 = (!indvar_flatten_phi_fu_243_p4.read().is_01() || !ap_const_lv15_1.is_01())? sc_lv<15>(): (sc_biguint<15>(indvar_flatten_phi_fu_243_p4.read()) + sc_biguint<15>(ap_const_lv15_1));
}

void DigitRec::thread_indvar_flatten_phi_fu_243_p4() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        indvar_flatten_phi_fu_243_p4 = indvar_flatten_next_reg_608.read();
    } else {
        indvar_flatten_phi_fu_243_p4 = indvar_flatten_reg_239.read();
    }
}

void DigitRec::thread_j_1_fu_439_p2() {
    j_1_fu_439_p2 = (!j_mid2_reg_613.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_mid2_reg_613.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void DigitRec::thread_j_cast2_fu_444_p1() {
    j_cast2_fu_444_p1 = esl_zext<7,4>(ap_reg_pp1_iter2_j_mid2_reg_613.read());
}

void DigitRec::thread_j_mid2_fu_393_p3() {
    j_mid2_fu_393_p3 = (!exitcond_fu_387_p2.read()[0].is_01())? sc_lv<4>(): ((exitcond_fu_387_p2.read()[0].to_bool())? ap_const_lv4_0: j_phi_fu_265_p4.read());
}

void DigitRec::thread_j_phi_fu_265_p4() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_604.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        j_phi_fu_265_p4 = j_1_reg_643.read();
    } else {
        j_phi_fu_265_p4 = j_reg_261.read();
    }
}

void DigitRec::thread_k_2_fu_333_p2() {
    k_2_fu_333_p2 = (!k_reg_216.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(k_reg_216.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void DigitRec::thread_knn_set_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        knn_set_V_address0 =  (sc_lv<5>) (tmp_s_fu_370_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage3.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage2.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())))) {
        knn_set_V_address0 = grp_update_knn_fu_277_min_distances_V_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        knn_set_V_address0 = grp_knn_vote_fu_272_knn_set_V_address0.read();
    } else {
        knn_set_V_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void DigitRec::thread_knn_set_V_address1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage3.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())))) {
        knn_set_V_address1 = grp_update_knn_fu_277_min_distances_V_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        knn_set_V_address1 = grp_knn_vote_fu_272_knn_set_V_address1.read();
    } else {
        knn_set_V_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void DigitRec::thread_knn_set_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        knn_set_V_ce0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage3_11001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())))) {
        knn_set_V_ce0 = grp_update_knn_fu_277_min_distances_V_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        knn_set_V_ce0 = grp_knn_vote_fu_272_knn_set_V_ce0.read();
    } else {
        knn_set_V_ce0 = ap_const_logic_0;
    }
}

void DigitRec::thread_knn_set_V_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())))) {
        knn_set_V_ce1 = grp_update_knn_fu_277_min_distances_V_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        knn_set_V_ce1 = grp_knn_vote_fu_272_knn_set_V_ce1.read();
    } else {
        knn_set_V_ce1 = ap_const_logic_0;
    }
}

void DigitRec::thread_knn_set_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        knn_set_V_d0 = ap_const_lv6_32;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        knn_set_V_d0 = grp_knn_vote_fu_272_knn_set_V_d0.read();
    } else {
        knn_set_V_d0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void DigitRec::thread_knn_set_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_358_p2.read()))) {
        knn_set_V_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        knn_set_V_we0 = grp_knn_vote_fu_272_knn_set_V_we0.read();
    } else {
        knn_set_V_we0 = ap_const_logic_0;
    }
}

void DigitRec::thread_knn_set_V_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter2_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp1_iter3_exitcond_flatten_reg_604.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read())))) {
        knn_set_V_we1 = grp_update_knn_fu_277_min_distances_V_we1.read();
    } else {
        knn_set_V_we1 = ap_const_logic_0;
    }
}

void DigitRec::thread_p_shl_cast_fu_454_p1() {
    p_shl_cast_fu_454_p1 = esl_zext<7,6>(p_shl_fu_447_p3.read());
}

void DigitRec::thread_p_shl_fu_447_p3() {
    p_shl_fu_447_p3 = esl_concat<4,2>(ap_reg_pp1_iter2_j_mid2_reg_613.read(), ap_const_lv2_0);
}

void DigitRec::thread_results_V6_sum_cast_fu_495_p1() {
    results_V6_sum_cast_fu_495_p1 = esl_zext<64,62>(results_V6_sum_reg_658.read());
}

void DigitRec::thread_results_V6_sum_fu_486_p2() {
    results_V6_sum_fu_486_p2 = (!tmp_47_cast_reg_557.read().is_01() || !tmp1_cast_fu_482_p1.read().is_01())? sc_lv<62>(): (sc_biguint<62>(tmp_47_cast_reg_557.read()) + sc_biguint<62>(tmp1_cast_fu_482_p1.read()));
}

void DigitRec::thread_testing_data_V4_sum_cast_fu_348_p1() {
    testing_data_V4_sum_cast_fu_348_p1 = esl_zext<64,62>(testing_data_V4_sum_reg_580.read());
}

void DigitRec::thread_testing_data_V4_sum_fu_343_p2() {
    testing_data_V4_sum_fu_343_p2 = (!tmp_cast_fu_339_p1.read().is_01() || !tmp_48_cast_reg_562.read().is_01())? sc_lv<62>(): (sc_biguint<62>(tmp_cast_fu_339_p1.read()) + sc_biguint<62>(tmp_48_cast_reg_562.read()));
}

void DigitRec::thread_tmp1_cast_fu_482_p1() {
    tmp1_cast_fu_482_p1 = esl_zext<62,4>(tmp_56_fu_472_p4.read());
}

void DigitRec::thread_tmp_13_cast_fu_464_p1() {
    tmp_13_cast_fu_464_p1 = esl_sext<32,7>(tmp_6_reg_653.read());
}

void DigitRec::thread_tmp_47_cast_fu_295_p1() {
    tmp_47_cast_fu_295_p1 = esl_zext<62,61>(tmp_fu_285_p4.read());
}

void DigitRec::thread_tmp_48_cast_fu_309_p1() {
    tmp_48_cast_fu_309_p1 = esl_zext<62,61>(tmp_54_fu_299_p4.read());
}

void DigitRec::thread_tmp_49_cast_fu_323_p1() {
    tmp_49_cast_fu_323_p1 = esl_zext<62,61>(tmp_55_fu_313_p4.read());
}

void DigitRec::thread_tmp_54_fu_299_p4() {
    tmp_54_fu_299_p4 = testing_data_V.read().range(63, 3);
}

void DigitRec::thread_tmp_55_fu_313_p4() {
    tmp_55_fu_313_p4 = training_data_V.read().range(63, 3);
}

void DigitRec::thread_tmp_56_fu_472_p4() {
    tmp_56_fu_472_p4 = k_reg_216.read().range(7, 4);
}

void DigitRec::thread_tmp_57_fu_491_p1() {
    tmp_57_fu_491_p1 = k_reg_216.read().range(4-1, 0);
}

void DigitRec::thread_tmp_58_fu_505_p3() {
    tmp_58_fu_505_p3 = esl_concat<4,2>(tmp_57_reg_663.read(), ap_const_lv2_0);
}

void DigitRec::thread_tmp_59_fu_512_p1() {
    tmp_59_fu_512_p1 = esl_zext<64,6>(tmp_58_fu_505_p3.read());
}

void DigitRec::thread_tmp_5_cast_fu_421_p1() {
    tmp_5_cast_fu_421_p1 = esl_zext<62,15>(tmp_4_reg_627.read());
}

void DigitRec::thread_tmp_60_fu_516_p2() {
    tmp_60_fu_516_p2 = (!tmp_59_fu_512_p1.read().is_01())? sc_lv<64>(): ap_const_lv64_F << (unsigned short)tmp_59_fu_512_p1.read().to_uint();
}

void DigitRec::thread_tmp_61_fu_522_p2() {
    tmp_61_fu_522_p2 = (tmp_60_fu_516_p2.read() ^ ap_const_lv64_FFFFFFFFFFFFFFFF);
}

void DigitRec::thread_tmp_62_fu_528_p2() {
    tmp_62_fu_528_p2 = (gmem_addr_1_read_reg_675.read() & tmp_61_fu_522_p2.read());
}

void DigitRec::thread_tmp_63_fu_533_p1() {
    tmp_63_fu_533_p1 = esl_zext<64,4>(grp_knn_vote_fu_272_ap_return.read());
}

void DigitRec::thread_tmp_64_fu_537_p2() {
    tmp_64_fu_537_p2 = (!tmp_59_fu_512_p1.read().is_01())? sc_lv<64>(): tmp_63_fu_533_p1.read() << (unsigned short)tmp_59_fu_512_p1.read().to_uint();
}

void DigitRec::thread_tmp_65_fu_543_p2() {
    tmp_65_fu_543_p2 = (tmp_62_fu_528_p2.read() | tmp_64_fu_537_p2.read());
}

void DigitRec::thread_tmp_6_fu_458_p2() {
    tmp_6_fu_458_p2 = (!p_shl_cast_fu_454_p1.read().is_01() || !j_cast2_fu_444_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(p_shl_cast_fu_454_p1.read()) - sc_biguint<7>(j_cast2_fu_444_p1.read()));
}

void DigitRec::thread_tmp_cast_fu_339_p1() {
    tmp_cast_fu_339_p1 = esl_zext<62,8>(k_reg_216.read());
}

void DigitRec::thread_tmp_fu_285_p4() {
    tmp_fu_285_p4 = results_V.read().range(63, 3);
}

void DigitRec::thread_tmp_s_fu_370_p1() {
    tmp_s_fu_370_p1 = esl_zext<64,5>(i_reg_228.read());
}

void DigitRec::thread_training_data_V2_sum_cast_fu_429_p1() {
    training_data_V2_sum_cast_fu_429_p1 = esl_zext<64,62>(training_data_V2_sum_reg_632.read());
}

void DigitRec::thread_training_data_V2_sum_fu_424_p2() {
    training_data_V2_sum_fu_424_p2 = (!tmp_5_cast_fu_421_p1.read().is_01() || !tmp_49_cast_reg_567.read().is_01())? sc_lv<62>(): (sc_biguint<62>(tmp_5_cast_fu_421_p1.read()) + sc_biguint<62>(tmp_49_cast_reg_567.read()));
}

void DigitRec::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond6_fu_327_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_358_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_375_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_375_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 8192 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            }
            break;
        case 32768 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state37;
            } else {
                ap_NS_fsm = ap_ST_fsm_state36;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_knn_vote_fu_272_ap_done.read())))) {
                ap_NS_fsm = ap_ST_fsm_state38;
            } else {
                ap_NS_fsm = ap_ST_fsm_state37;
            }
            break;
        case 67108864 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state39;
            } else {
                ap_NS_fsm = ap_ST_fsm_state38;
            }
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 2147483648 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state43;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void DigitRec::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

