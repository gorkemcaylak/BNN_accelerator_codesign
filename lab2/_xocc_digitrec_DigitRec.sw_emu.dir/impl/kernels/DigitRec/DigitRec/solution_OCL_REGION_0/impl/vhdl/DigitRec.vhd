-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DigitRec is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of DigitRec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DigitRec,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=12985921,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=1,HLS_SYN_FF=2632,HLS_SYN_LUT=4807}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv15_4650 : STD_LOGIC_VECTOR (14 downto 0) := "100011001010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv15_708 : STD_LOGIC_VECTOR (14 downto 0) := "000011100001000";

    signal ap_rst_n_inv : STD_LOGIC := '1';
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal training_data_V : STD_LOGIC_VECTOR (63 downto 0);
    signal testing_data_V : STD_LOGIC_VECTOR (63 downto 0);
    signal results_V : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal exitcond_flatten_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_reg_pp1_iter2_exitcond_flatten_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_239 : STD_LOGIC_VECTOR (14 downto 0);
    signal i1_reg_250 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_47_cast_fu_295_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_47_cast_reg_557 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_48_cast_fu_309_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_48_cast_reg_562 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_49_cast_fu_323_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_49_cast_reg_567 : STD_LOGIC_VECTOR (61 downto 0);
    signal k_2_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_2_reg_575 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal testing_data_V4_sum_fu_343_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal testing_data_V4_sum_reg_580 : STD_LOGIC_VECTOR (61 downto 0);
    signal exitcond6_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal testing_instance_V_reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond_flatten_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_flatten_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter3_exitcond_flatten_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_381_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_next_reg_608 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_mid2_fu_393_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp1_iter1_j_mid2_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp1_iter2_j_mid2_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_cast4_mid2_v_fu_407_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal i1_cast4_mid2_v_reg_621 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_549_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_reg_627 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state14_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state18_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state22_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state26_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal training_data_V2_sum_fu_424_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal training_data_V2_sum_reg_632 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_state15_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_state27_pp1_stage2_iter3 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal ap_block_state16_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state20_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_state24_pp1_stage3_iter2 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal j_1_fu_439_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_643 : STD_LOGIC_VECTOR (3 downto 0);
    signal training_instance_V_reg_648 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_reg_653 : STD_LOGIC_VECTOR (6 downto 0);
    signal results_V6_sum_fu_486_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal results_V6_sum_reg_658 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_57_fu_491_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_57_reg_663 : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_addr_1_reg_668 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_read_reg_675 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_543_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_reg_680 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal grp_knn_vote_fu_272_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal knn_set_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal knn_set_V_ce0 : STD_LOGIC;
    signal knn_set_V_we0 : STD_LOGIC;
    signal knn_set_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal knn_set_V_ce1 : STD_LOGIC;
    signal knn_set_V_we1 : STD_LOGIC;
    signal knn_set_V_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_knn_vote_fu_272_ap_start : STD_LOGIC;
    signal grp_knn_vote_fu_272_ap_idle : STD_LOGIC;
    signal grp_knn_vote_fu_272_ap_ready : STD_LOGIC;
    signal grp_knn_vote_fu_272_knn_set_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_knn_vote_fu_272_knn_set_V_ce0 : STD_LOGIC;
    signal grp_knn_vote_fu_272_knn_set_V_we0 : STD_LOGIC;
    signal grp_knn_vote_fu_272_knn_set_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_knn_vote_fu_272_knn_set_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_knn_vote_fu_272_knn_set_V_ce1 : STD_LOGIC;
    signal grp_knn_vote_fu_272_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_knn_fu_277_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_277_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_277_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_277_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_277_min_distances_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_update_knn_fu_277_min_distances_V_ce0 : STD_LOGIC;
    signal grp_update_knn_fu_277_min_distances_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_update_knn_fu_277_min_distances_V_ce1 : STD_LOGIC;
    signal grp_update_knn_fu_277_min_distances_V_we1 : STD_LOGIC;
    signal grp_update_knn_fu_277_min_distances_V_d1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_277_min_distances_V_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_knn_fu_277_ap_ce : STD_LOGIC;
    signal k_reg_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_228 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_phi_fu_243_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i1_phi_fu_254_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_phi_fu_265_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_grp_knn_vote_fu_272_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_update_knn_fu_277_ap_start : STD_LOGIC := '0';
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal tmp_s_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal testing_data_V4_sum_cast_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal training_data_V2_sum_cast_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal results_V6_sum_cast_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage3_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal tmp_fu_285_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_54_fu_299_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_55_fu_313_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_cast_fu_339_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal exitcond_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_401_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_cast_fu_421_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_shl_fu_447_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_454_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast2_fu_444_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_cast_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_472_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_cast_fu_482_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_58_fu_505_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_59_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_549_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_549_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_549_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_615 : BOOLEAN;

    component knn_vote IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        knn_set_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        knn_set_V_ce0 : OUT STD_LOGIC;
        knn_set_V_we0 : OUT STD_LOGIC;
        knn_set_V_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        knn_set_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        knn_set_V_ce1 : OUT STD_LOGIC;
        knn_set_V_q1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component update_knn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        test_inst_V : IN STD_LOGIC_VECTOR (63 downto 0);
        train_inst_V : IN STD_LOGIC_VECTOR (63 downto 0);
        min_distances_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        min_distances_V_ce0 : OUT STD_LOGIC;
        min_distances_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        min_distances_V_ce1 : OUT STD_LOGIC;
        min_distances_V_we1 : OUT STD_LOGIC;
        min_distances_V_d1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V_q1 : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_V_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component DigitRec_mac_muladd_4ns_12ns_11ns_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component DigitRec_knn_set_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (5 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component DigitRec_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        training_data_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        testing_data_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        results_V : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DigitRec_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    DigitRec_control_s_axi_U : component DigitRec_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        training_data_V => training_data_V,
        testing_data_V => testing_data_V,
        results_V => results_V);

    DigitRec_gmem_m_axi_U : component DigitRec_gmem_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_668,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => tmp_65_reg_680,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    knn_set_V_U : component DigitRec_knn_set_V
    generic map (
        DataWidth => 6,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => knn_set_V_address0,
        ce0 => knn_set_V_ce0,
        we0 => knn_set_V_we0,
        d0 => knn_set_V_d0,
        q0 => knn_set_V_q0,
        address1 => knn_set_V_address1,
        ce1 => knn_set_V_ce1,
        we1 => knn_set_V_we1,
        d1 => grp_update_knn_fu_277_min_distances_V_d1,
        q1 => knn_set_V_q1);

    grp_knn_vote_fu_272 : component knn_vote
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_knn_vote_fu_272_ap_start,
        ap_done => grp_knn_vote_fu_272_ap_done,
        ap_idle => grp_knn_vote_fu_272_ap_idle,
        ap_ready => grp_knn_vote_fu_272_ap_ready,
        knn_set_V_address0 => grp_knn_vote_fu_272_knn_set_V_address0,
        knn_set_V_ce0 => grp_knn_vote_fu_272_knn_set_V_ce0,
        knn_set_V_we0 => grp_knn_vote_fu_272_knn_set_V_we0,
        knn_set_V_d0 => grp_knn_vote_fu_272_knn_set_V_d0,
        knn_set_V_q0 => knn_set_V_q0,
        knn_set_V_address1 => grp_knn_vote_fu_272_knn_set_V_address1,
        knn_set_V_ce1 => grp_knn_vote_fu_272_knn_set_V_ce1,
        knn_set_V_q1 => knn_set_V_q1,
        ap_return => grp_knn_vote_fu_272_ap_return);

    grp_update_knn_fu_277 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_update_knn_fu_277_ap_start,
        ap_done => grp_update_knn_fu_277_ap_done,
        ap_idle => grp_update_knn_fu_277_ap_idle,
        ap_ready => grp_update_knn_fu_277_ap_ready,
        test_inst_V => testing_instance_V_reg_591,
        train_inst_V => training_instance_V_reg_648,
        min_distances_V_address0 => grp_update_knn_fu_277_min_distances_V_address0,
        min_distances_V_ce0 => grp_update_knn_fu_277_min_distances_V_ce0,
        min_distances_V_q0 => knn_set_V_q0,
        min_distances_V_address1 => grp_update_knn_fu_277_min_distances_V_address1,
        min_distances_V_ce1 => grp_update_knn_fu_277_min_distances_V_ce1,
        min_distances_V_we1 => grp_update_knn_fu_277_min_distances_V_we1,
        min_distances_V_d1 => grp_update_knn_fu_277_min_distances_V_d1,
        min_distances_V_q1 => knn_set_V_q1,
        min_distances_V_offset => grp_update_knn_fu_277_min_distances_V_offset,
        ap_ce => grp_update_knn_fu_277_ap_ce);

    DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7 : component DigitRec_mac_muladd_4ns_12ns_11ns_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 12,
        din2_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_549_p0,
        din1 => grp_fu_549_p1,
        din2 => grp_fu_549_p2,
        dout => grp_fu_549_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_subdone = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state13 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3_subdone = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_subdone = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_knn_vote_fu_272_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_knn_vote_fu_272_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (gmem_RVALID = ap_const_logic_1))) then 
                    ap_reg_grp_knn_vote_fu_272_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_knn_vote_fu_272_ap_ready)) then 
                    ap_reg_grp_knn_vote_fu_272_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_update_knn_fu_277_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_update_knn_fu_277_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_block_pp1_stage2_11001 = ap_const_boolean_0))) then 
                    ap_reg_grp_update_knn_fu_277_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_update_knn_fu_277_ap_ready)) then 
                    ap_reg_grp_update_knn_fu_277_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_block_pp1_stage3_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = gmem_ARREADY) and (ap_block_pp1_stage3_01001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY) or (ap_const_logic_0 = grp_knn_vote_fu_272_ap_done)))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = gmem_AWREADY) and (grp_knn_vote_fu_272_ap_done = ap_const_logic_1))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_n_inv <= not(ap_rst_n);
        end if;
    end process;

    i1_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i1_reg_250 <= ap_const_lv11_0;
            elsif (((exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                i1_reg_250 <= i1_cast4_mid2_v_reg_621;
            end if; 
        end if;
    end process;

    i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond7_fu_358_p2))) then 
                i_reg_228 <= i_3_fu_364_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (gmem_RVALID = ap_const_logic_1))) then 
                i_reg_228 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvar_flatten_reg_239 <= ap_const_lv15_0;
            elsif (((exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                indvar_flatten_reg_239 <= indvar_flatten_next_reg_608;
            end if; 
        end if;
    end process;

    j_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_reg_261 <= ap_const_lv4_0;
            elsif (((exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                j_reg_261 <= j_1_reg_643;
            end if; 
        end if;
    end process;

    k_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_216 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (gmem_BVALID = ap_const_logic_1))) then 
                k_reg_216 <= k_2_reg_575;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_flatten_reg_604 <= exitcond_flatten_reg_604;
                ap_reg_pp1_iter1_j_mid2_reg_613 <= j_mid2_reg_613;
                ap_reg_pp1_iter2_exitcond_flatten_reg_604 <= ap_reg_pp1_iter1_exitcond_flatten_reg_604;
                ap_reg_pp1_iter2_j_mid2_reg_613 <= ap_reg_pp1_iter1_j_mid2_reg_613;
                ap_reg_pp1_iter3_exitcond_flatten_reg_604 <= ap_reg_pp1_iter2_exitcond_flatten_reg_604;
                exitcond_flatten_reg_604 <= exitcond_flatten_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (gmem_RVALID = ap_const_logic_1))) then
                gmem_addr_1_read_reg_675 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    gmem_addr_1_reg_668(61 downto 0) <= results_V6_sum_cast_fu_495_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_375_p2))) then
                i1_cast4_mid2_v_reg_621 <= i1_cast4_mid2_v_fu_407_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0))) then
                indvar_flatten_next_reg_608 <= indvar_flatten_next_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_block_pp1_stage3_11001 = ap_const_boolean_0))) then
                j_1_reg_643 <= j_1_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_375_p2))) then
                j_mid2_reg_613 <= j_mid2_fu_393_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_2_reg_575 <= k_2_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                results_V6_sum_reg_658 <= results_V6_sum_fu_486_p2;
                tmp_57_reg_663 <= tmp_57_fu_491_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond6_fu_327_p2))) then
                testing_data_V4_sum_reg_580 <= testing_data_V4_sum_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (gmem_RVALID = ap_const_logic_1))) then
                testing_instance_V_reg_591 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_47_cast_reg_557(60 downto 0) <= tmp_47_cast_fu_295_p1(60 downto 0);
                    tmp_48_cast_reg_562(60 downto 0) <= tmp_48_cast_fu_309_p1(60 downto 0);
                    tmp_49_cast_reg_567(60 downto 0) <= tmp_49_cast_fu_323_p1(60 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_11001 = ap_const_boolean_0))) then
                tmp_4_reg_627 <= grp_fu_549_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and not(((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY) or (ap_const_logic_0 = grp_knn_vote_fu_272_ap_done))))) then
                tmp_65_reg_680 <= tmp_65_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_block_pp1_stage2_11001 = ap_const_boolean_0))) then
                tmp_6_reg_653 <= tmp_6_fu_458_p2;
                training_instance_V_reg_648 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_11001 = ap_const_boolean_0))) then
                training_data_V2_sum_reg_632 <= training_data_V2_sum_fu_424_p2;
            end if;
        end if;
    end process;
    tmp_47_cast_reg_557(61) <= '0';
    tmp_48_cast_reg_562(61) <= '0';
    tmp_49_cast_reg_567(61) <= '0';
    gmem_addr_1_reg_668(63 downto 62) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_CS_fsm_state29, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state43, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state2, exitcond6_fu_327_p2, ap_sig_ioackin_gmem_ARREADY, ap_CS_fsm_state11, exitcond_flatten_fu_375_p2, ap_sig_ioackin_gmem_AWREADY, grp_knn_vote_fu_272_ap_done, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage3_subdone, ap_block_pp1_stage2_subdone, ap_enable_reg_pp1_iter3, exitcond7_fu_358_p2, ap_sig_ioackin_gmem_WREADY, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond6_fu_327_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond7_fu_358_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (exitcond_flatten_fu_375_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (exitcond_flatten_fu_375_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_block_pp1_stage1_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if (((ap_block_pp1_stage2_subdone = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_block_pp1_stage3_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and not(((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY) or (ap_const_logic_0 = grp_knn_vote_fu_272_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_sig_ioackin_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(13);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(14);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(16);
    ap_CS_fsm_state29 <= ap_CS_fsm(17);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(24);
    ap_CS_fsm_state37 <= ap_CS_fsm(25);
    ap_CS_fsm_state38 <= ap_CS_fsm(26);
    ap_CS_fsm_state43 <= ap_CS_fsm(31);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage2_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, gmem_RVALID)
    begin
                ap_block_pp1_stage2_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_0 = gmem_RVALID));
    end process;


    ap_block_pp1_stage2_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, gmem_RVALID)
    begin
                ap_block_pp1_stage2_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_0 = gmem_RVALID));
    end process;

        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage3_11001_assign_proc : process(ap_enable_reg_pp1_iter0, ap_block_state16_io)
    begin
                ap_block_pp1_stage3_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_boolean_1 = ap_block_state16_io));
    end process;


    ap_block_pp1_stage3_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, ap_block_state16_io)
    begin
                ap_block_pp1_stage3_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_boolean_1 = ap_block_state16_io));
    end process;

        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(exitcond_flatten_reg_604, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state16_io <= ((exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY));
    end process;

        ap_block_state16_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_pp1_stage2_iter2_assign_proc : process(ap_reg_pp1_iter2_exitcond_flatten_reg_604, gmem_RVALID)
    begin
                ap_block_state23_pp1_stage2_iter2 <= ((ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_0 = gmem_RVALID));
    end process;

        ap_block_state24_pp1_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_615_assign_proc : process(ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter0, exitcond_flatten_reg_604, ap_block_pp1_stage3_01001)
    begin
                ap_condition_615 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_block_pp1_stage3_01001 = ap_const_boolean_0));
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(exitcond_flatten_fu_375_p2)
    begin
        if ((exitcond_flatten_fu_375_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond6_fu_327_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond6_fu_327_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2) and (ap_const_logic_0 = ap_enable_reg_pp1_iter3))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond6_fu_327_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond6_fu_327_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond6_fu_327_p2 <= "1" when (k_reg_216 = ap_const_lv8_B4) else "0";
    exitcond7_fu_358_p2 <= "1" when (i_reg_228 = ap_const_lv5_1E) else "0";
    exitcond_flatten_fu_375_p2 <= "1" when (indvar_flatten_phi_fu_243_p4 = ap_const_lv15_4650) else "0";
    exitcond_fu_387_p2 <= "1" when (j_phi_fu_265_p4 = ap_const_lv4_A) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state29, testing_data_V4_sum_cast_fu_348_p1, training_data_V2_sum_cast_fu_429_p1, results_V6_sum_cast_fu_495_p1, ap_reg_ioackin_gmem_ARREADY, ap_condition_615)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                gmem_ARADDR <= results_V6_sum_cast_fu_495_p1;
            elsif ((ap_condition_615 = ap_const_boolean_1)) then 
                gmem_ARADDR <= training_data_V2_sum_cast_fu_429_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                gmem_ARADDR <= testing_data_V4_sum_cast_fu_348_p1;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter0, exitcond_flatten_reg_604, ap_CS_fsm_state29, ap_reg_ioackin_gmem_ARREADY, ap_block_pp1_stage3_01001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY) and (ap_block_pp1_stage3_01001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state37, grp_knn_vote_fu_272_ap_done, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_knn_vote_fu_272_ap_done = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state43, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (gmem_BVALID = ap_const_logic_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, ap_CS_fsm_state36, gmem_RVALID, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_block_pp1_stage2_11001 = ap_const_boolean_0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state38, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter0, ap_block_pp1_stage3, exitcond_flatten_reg_604, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage3 = ap_const_boolean_0) and (exitcond_flatten_reg_604 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage2 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604)) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_549_p0 <= grp_fu_549_p00(4 - 1 downto 0);
    grp_fu_549_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_613),15));
    grp_fu_549_p1 <= ap_const_lv15_708(12 - 1 downto 0);
    grp_fu_549_p2 <= grp_fu_549_p20(11 - 1 downto 0);
    grp_fu_549_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_cast4_mid2_v_reg_621),15));
    grp_knn_vote_fu_272_ap_start <= ap_reg_grp_knn_vote_fu_272_ap_start;

    grp_update_knn_fu_277_ap_ce_assign_proc : process(ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_reg_pp1_iter3_exitcond_flatten_reg_604, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage2_11001, ap_block_pp1_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_block_pp1_stage3_11001 = ap_const_boolean_0)) or ((ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604)))) then 
            grp_update_knn_fu_277_ap_ce <= ap_const_logic_1;
        else 
            grp_update_knn_fu_277_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_update_knn_fu_277_ap_start <= ap_reg_grp_update_knn_fu_277_ap_start;
    grp_update_knn_fu_277_min_distances_V_offset <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_cast_fu_464_p1),64));
    i1_cast4_mid2_v_fu_407_p3 <= 
        i_s_fu_401_p2 when (exitcond_fu_387_p2(0) = '1') else 
        i1_phi_fu_254_p4;

    i1_phi_fu_254_p4_assign_proc : process(exitcond_flatten_reg_604, i1_reg_250, ap_CS_fsm_pp1_stage0, i1_cast4_mid2_v_reg_621, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0 = ap_const_boolean_0))) then 
            i1_phi_fu_254_p4 <= i1_cast4_mid2_v_reg_621;
        else 
            i1_phi_fu_254_p4 <= i1_reg_250;
        end if; 
    end process;

    i_3_fu_364_p2 <= std_logic_vector(unsigned(i_reg_228) + unsigned(ap_const_lv5_1));
    i_s_fu_401_p2 <= std_logic_vector(unsigned(i1_phi_fu_254_p4) + unsigned(ap_const_lv11_1));
    indvar_flatten_next_fu_381_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_243_p4) + unsigned(ap_const_lv15_1));

    indvar_flatten_phi_fu_243_p4_assign_proc : process(exitcond_flatten_reg_604, indvar_flatten_reg_239, ap_CS_fsm_pp1_stage0, indvar_flatten_next_reg_608, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_243_p4 <= indvar_flatten_next_reg_608;
        else 
            indvar_flatten_phi_fu_243_p4 <= indvar_flatten_reg_239;
        end if; 
    end process;

    j_1_fu_439_p2 <= std_logic_vector(unsigned(j_mid2_reg_613) + unsigned(ap_const_lv4_1));
    j_cast2_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp1_iter2_j_mid2_reg_613),7));
    j_mid2_fu_393_p3 <= 
        ap_const_lv4_0 when (exitcond_fu_387_p2(0) = '1') else 
        j_phi_fu_265_p4;

    j_phi_fu_265_p4_assign_proc : process(exitcond_flatten_reg_604, j_reg_261, ap_CS_fsm_pp1_stage0, j_1_reg_643, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((exitcond_flatten_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0 = ap_const_boolean_0))) then 
            j_phi_fu_265_p4 <= j_1_reg_643;
        else 
            j_phi_fu_265_p4 <= j_reg_261;
        end if; 
    end process;

    k_2_fu_333_p2 <= std_logic_vector(unsigned(k_reg_216) + unsigned(ap_const_lv8_1));

    knn_set_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, ap_CS_fsm_state37, ap_CS_fsm_state11, ap_CS_fsm_pp1_stage0, ap_reg_pp1_iter3_exitcond_flatten_reg_604, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter3, grp_knn_vote_fu_272_knn_set_V_address0, grp_update_knn_fu_277_min_distances_V_address0, ap_block_pp1_stage0, ap_block_pp1_stage1, tmp_s_fu_370_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            knn_set_V_address0 <= tmp_s_fu_370_p1(5 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604)) or ((ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_block_pp1_stage1 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)))) then 
            knn_set_V_address0 <= grp_update_knn_fu_277_min_distances_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            knn_set_V_address0 <= grp_knn_vote_fu_272_knn_set_V_address0;
        else 
            knn_set_V_address0 <= "XXXXX";
        end if; 
    end process;


    knn_set_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, ap_CS_fsm_state37, ap_CS_fsm_pp1_stage0, ap_reg_pp1_iter3_exitcond_flatten_reg_604, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter3, grp_knn_vote_fu_272_knn_set_V_address1, grp_update_knn_fu_277_min_distances_V_address1, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_block_pp1_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604)) or ((ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_block_pp1_stage1 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)))) then 
            knn_set_V_address1 <= grp_update_knn_fu_277_min_distances_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            knn_set_V_address1 <= grp_knn_vote_fu_272_knn_set_V_address1;
        else 
            knn_set_V_address1 <= "XXXXX";
        end if; 
    end process;


    knn_set_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, ap_CS_fsm_state37, ap_CS_fsm_state11, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_reg_pp1_iter3_exitcond_flatten_reg_604, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage2_11001, ap_block_pp1_stage3_11001, ap_enable_reg_pp1_iter3, grp_knn_vote_fu_272_knn_set_V_ce0, grp_update_knn_fu_277_min_distances_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            knn_set_V_ce0 <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_block_pp1_stage3_11001 = ap_const_boolean_0)) or ((ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)))) then 
            knn_set_V_ce0 <= grp_update_knn_fu_277_min_distances_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            knn_set_V_ce0 <= grp_knn_vote_fu_272_knn_set_V_ce0;
        else 
            knn_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, ap_CS_fsm_state37, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_reg_pp1_iter3_exitcond_flatten_reg_604, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage2_11001, ap_block_pp1_stage3_11001, ap_enable_reg_pp1_iter3, grp_knn_vote_fu_272_knn_set_V_ce1, grp_update_knn_fu_277_min_distances_V_ce1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_block_pp1_stage3_11001 = ap_const_boolean_0)) or ((ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)))) then 
            knn_set_V_ce1 <= grp_update_knn_fu_277_min_distances_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            knn_set_V_ce1 <= grp_knn_vote_fu_272_knn_set_V_ce1;
        else 
            knn_set_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_V_d0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state11, grp_knn_vote_fu_272_knn_set_V_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            knn_set_V_d0 <= ap_const_lv6_32;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            knn_set_V_d0 <= grp_knn_vote_fu_272_knn_set_V_d0;
        else 
            knn_set_V_d0 <= "XXXXXX";
        end if; 
    end process;


    knn_set_V_we0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state11, grp_knn_vote_fu_272_knn_set_V_we0, exitcond7_fu_358_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond7_fu_358_p2))) then 
            knn_set_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            knn_set_V_we0 <= grp_knn_vote_fu_272_knn_set_V_we0;
        else 
            knn_set_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_V_we1_assign_proc : process(ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter2_exitcond_flatten_reg_604, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_reg_pp1_iter3_exitcond_flatten_reg_604, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage2_11001, ap_block_pp1_stage3_11001, ap_enable_reg_pp1_iter3, grp_update_knn_fu_277_min_distances_V_we1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_block_pp1_stage3_11001 = ap_const_boolean_0)) or ((ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter3_exitcond_flatten_reg_604) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)))) then 
            knn_set_V_we1 <= grp_update_knn_fu_277_min_distances_V_we1;
        else 
            knn_set_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_447_p3),7));
    p_shl_fu_447_p3 <= (ap_reg_pp1_iter2_j_mid2_reg_613 & ap_const_lv2_0);
    results_V6_sum_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(results_V6_sum_reg_658),64));
    results_V6_sum_fu_486_p2 <= std_logic_vector(unsigned(tmp_47_cast_reg_557) + unsigned(tmp1_cast_fu_482_p1));
    testing_data_V4_sum_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(testing_data_V4_sum_reg_580),64));
    testing_data_V4_sum_fu_343_p2 <= std_logic_vector(unsigned(tmp_cast_fu_339_p1) + unsigned(tmp_48_cast_reg_562));
    tmp1_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_472_p4),62));
        tmp_13_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_653),32));

    tmp_47_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_285_p4),62));
    tmp_48_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_299_p4),62));
    tmp_49_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_313_p4),62));
    tmp_54_fu_299_p4 <= testing_data_V(63 downto 3);
    tmp_55_fu_313_p4 <= training_data_V(63 downto 3);
    tmp_56_fu_472_p4 <= k_reg_216(7 downto 4);
    tmp_57_fu_491_p1 <= k_reg_216(4 - 1 downto 0);
    tmp_58_fu_505_p3 <= (tmp_57_reg_663 & ap_const_lv2_0);
    tmp_59_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_505_p3),64));
    tmp_5_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_627),62));
    tmp_60_fu_516_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_F),to_integer(unsigned('0' & tmp_59_fu_512_p1(31-1 downto 0)))));
    tmp_61_fu_522_p2 <= (tmp_60_fu_516_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_62_fu_528_p2 <= (gmem_addr_1_read_reg_675 and tmp_61_fu_522_p2);
    tmp_63_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_knn_vote_fu_272_ap_return),64));
    tmp_64_fu_537_p2 <= std_logic_vector(shift_left(unsigned(tmp_63_fu_533_p1),to_integer(unsigned('0' & tmp_59_fu_512_p1(31-1 downto 0)))));
    tmp_65_fu_543_p2 <= (tmp_62_fu_528_p2 or tmp_64_fu_537_p2);
    tmp_6_fu_458_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_454_p1) - unsigned(j_cast2_fu_444_p1));
    tmp_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_216),62));
    tmp_fu_285_p4 <= results_V(63 downto 3);
    tmp_s_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_228),64));
    training_data_V2_sum_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V2_sum_reg_632),64));
    training_data_V2_sum_fu_424_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_421_p1) + unsigned(tmp_49_cast_reg_567));
end behav;
