// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DigitRec,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=12985921,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=1,HLS_SYN_FF=2632,HLS_SYN_LUT=4807}" *)

module DigitRec (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_pp1_stage0 = 32'd4096;
parameter    ap_ST_fsm_pp1_stage1 = 32'd8192;
parameter    ap_ST_fsm_pp1_stage2 = 32'd16384;
parameter    ap_ST_fsm_pp1_stage3 = 32'd32768;
parameter    ap_ST_fsm_state28 = 32'd65536;
parameter    ap_ST_fsm_state29 = 32'd131072;
parameter    ap_ST_fsm_state30 = 32'd262144;
parameter    ap_ST_fsm_state31 = 32'd524288;
parameter    ap_ST_fsm_state32 = 32'd1048576;
parameter    ap_ST_fsm_state33 = 32'd2097152;
parameter    ap_ST_fsm_state34 = 32'd4194304;
parameter    ap_ST_fsm_state35 = 32'd8388608;
parameter    ap_ST_fsm_state36 = 32'd16777216;
parameter    ap_ST_fsm_state37 = 32'd33554432;
parameter    ap_ST_fsm_state38 = 32'd67108864;
parameter    ap_ST_fsm_state39 = 32'd134217728;
parameter    ap_ST_fsm_state40 = 32'd268435456;
parameter    ap_ST_fsm_state41 = 32'd536870912;
parameter    ap_ST_fsm_state42 = 32'd1073741824;
parameter    ap_ST_fsm_state43 = 32'd2147483648;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 64;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] training_data_V;
wire   [63:0] testing_data_V;
wire   [63:0] results_V;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_pp1_stage3;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage3;
reg   [0:0] exitcond_flatten_reg_604;
wire    ap_CS_fsm_pp1_stage2;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage2;
reg   [0:0] ap_reg_pp1_iter2_exitcond_flatten_reg_604;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state36;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state37;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state38;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state43;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [63:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [14:0] indvar_flatten_reg_239;
reg   [10:0] i1_reg_250;
reg   [3:0] j_reg_261;
wire   [61:0] tmp_47_cast_fu_295_p1;
reg   [61:0] tmp_47_cast_reg_557;
wire   [61:0] tmp_48_cast_fu_309_p1;
reg   [61:0] tmp_48_cast_reg_562;
wire   [61:0] tmp_49_cast_fu_323_p1;
reg   [61:0] tmp_49_cast_reg_567;
wire   [7:0] k_2_fu_333_p2;
reg   [7:0] k_2_reg_575;
wire    ap_CS_fsm_state2;
wire   [61:0] testing_data_V4_sum_fu_343_p2;
reg   [61:0] testing_data_V4_sum_reg_580;
wire   [0:0] exitcond6_fu_327_p2;
reg    ap_sig_ioackin_gmem_ARREADY;
reg   [63:0] testing_instance_V_reg_591;
wire   [4:0] i_3_fu_364_p2;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond_flatten_fu_375_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
wire    ap_block_state25_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_exitcond_flatten_reg_604;
reg   [0:0] ap_reg_pp1_iter3_exitcond_flatten_reg_604;
wire   [14:0] indvar_flatten_next_fu_381_p2;
reg   [14:0] indvar_flatten_next_reg_608;
wire   [3:0] j_mid2_fu_393_p3;
reg   [3:0] j_mid2_reg_613;
reg   [3:0] ap_reg_pp1_iter1_j_mid2_reg_613;
reg   [3:0] ap_reg_pp1_iter2_j_mid2_reg_613;
wire   [10:0] i1_cast4_mid2_v_fu_407_p3;
reg   [10:0] i1_cast4_mid2_v_reg_621;
wire   [14:0] grp_fu_549_p3;
reg   [14:0] tmp_4_reg_627;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state14_pp1_stage1_iter0;
wire    ap_block_state18_pp1_stage1_iter1;
wire    ap_block_state22_pp1_stage1_iter2;
wire    ap_block_state26_pp1_stage1_iter3;
wire    ap_block_pp1_stage1_11001;
wire   [61:0] training_data_V2_sum_fu_424_p2;
reg   [61:0] training_data_V2_sum_reg_632;
wire    ap_block_state15_pp1_stage2_iter0;
wire    ap_block_state19_pp1_stage2_iter1;
reg    ap_block_state23_pp1_stage2_iter2;
wire    ap_block_state27_pp1_stage2_iter3;
reg    ap_block_pp1_stage2_11001;
wire    ap_block_state16_pp1_stage3_iter0;
reg    ap_block_state16_io;
wire    ap_block_state20_pp1_stage3_iter1;
wire    ap_block_state24_pp1_stage3_iter2;
reg    ap_block_pp1_stage3_11001;
wire   [3:0] j_1_fu_439_p2;
reg   [3:0] j_1_reg_643;
reg   [63:0] training_instance_V_reg_648;
wire   [6:0] tmp_6_fu_458_p2;
reg   [6:0] tmp_6_reg_653;
wire   [61:0] results_V6_sum_fu_486_p2;
reg   [61:0] results_V6_sum_reg_658;
wire    ap_CS_fsm_state28;
wire   [3:0] tmp_57_fu_491_p1;
reg   [3:0] tmp_57_reg_663;
reg   [63:0] gmem_addr_1_reg_668;
reg   [63:0] gmem_addr_1_read_reg_675;
wire   [63:0] tmp_65_fu_543_p2;
reg   [63:0] tmp_65_reg_680;
reg    ap_sig_ioackin_gmem_AWREADY;
wire    grp_knn_vote_fu_272_ap_done;
wire    ap_CS_fsm_state12;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_enable_reg_pp1_iter3;
reg   [4:0] knn_set_V_address0;
reg    knn_set_V_ce0;
reg    knn_set_V_we0;
reg   [5:0] knn_set_V_d0;
wire   [5:0] knn_set_V_q0;
reg   [4:0] knn_set_V_address1;
reg    knn_set_V_ce1;
reg    knn_set_V_we1;
wire   [5:0] knn_set_V_q1;
wire    grp_knn_vote_fu_272_ap_start;
wire    grp_knn_vote_fu_272_ap_idle;
wire    grp_knn_vote_fu_272_ap_ready;
wire   [4:0] grp_knn_vote_fu_272_knn_set_V_address0;
wire    grp_knn_vote_fu_272_knn_set_V_ce0;
wire    grp_knn_vote_fu_272_knn_set_V_we0;
wire   [5:0] grp_knn_vote_fu_272_knn_set_V_d0;
wire   [4:0] grp_knn_vote_fu_272_knn_set_V_address1;
wire    grp_knn_vote_fu_272_knn_set_V_ce1;
wire   [3:0] grp_knn_vote_fu_272_ap_return;
wire    grp_update_knn_fu_277_ap_start;
wire    grp_update_knn_fu_277_ap_done;
wire    grp_update_knn_fu_277_ap_idle;
wire    grp_update_knn_fu_277_ap_ready;
wire   [4:0] grp_update_knn_fu_277_min_distances_V_address0;
wire    grp_update_knn_fu_277_min_distances_V_ce0;
wire   [4:0] grp_update_knn_fu_277_min_distances_V_address1;
wire    grp_update_knn_fu_277_min_distances_V_ce1;
wire    grp_update_knn_fu_277_min_distances_V_we1;
wire   [5:0] grp_update_knn_fu_277_min_distances_V_d1;
wire   [63:0] grp_update_knn_fu_277_min_distances_V_offset;
reg    grp_update_knn_fu_277_ap_ce;
reg   [7:0] k_reg_216;
reg   [4:0] i_reg_228;
wire   [0:0] exitcond7_fu_358_p2;
reg   [14:0] indvar_flatten_phi_fu_243_p4;
wire    ap_block_pp1_stage0;
reg   [10:0] i1_phi_fu_254_p4;
reg   [3:0] j_phi_fu_265_p4;
reg    ap_reg_grp_knn_vote_fu_272_ap_start;
reg    ap_reg_grp_update_knn_fu_277_ap_start;
wire    ap_block_pp1_stage1;
wire   [63:0] tmp_s_fu_370_p1;
wire   [63:0] testing_data_V4_sum_cast_fu_348_p1;
wire   [63:0] training_data_V2_sum_cast_fu_429_p1;
wire   [63:0] results_V6_sum_cast_fu_495_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
wire    ap_block_pp1_stage3_01001;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire   [60:0] tmp_fu_285_p4;
wire   [60:0] tmp_54_fu_299_p4;
wire   [60:0] tmp_55_fu_313_p4;
wire   [61:0] tmp_cast_fu_339_p1;
wire   [0:0] exitcond_fu_387_p2;
wire   [10:0] i_s_fu_401_p2;
wire   [61:0] tmp_5_cast_fu_421_p1;
wire   [5:0] p_shl_fu_447_p3;
wire   [6:0] p_shl_cast_fu_454_p1;
wire   [6:0] j_cast2_fu_444_p1;
wire  signed [31:0] tmp_13_cast_fu_464_p1;
wire   [3:0] tmp_56_fu_472_p4;
wire   [61:0] tmp1_cast_fu_482_p1;
wire   [5:0] tmp_58_fu_505_p3;
wire   [63:0] tmp_59_fu_512_p1;
wire   [63:0] tmp_60_fu_516_p2;
wire   [63:0] tmp_61_fu_522_p2;
wire   [63:0] tmp_63_fu_533_p1;
wire   [63:0] tmp_62_fu_528_p2;
wire   [63:0] tmp_64_fu_537_p2;
wire   [3:0] grp_fu_549_p0;
wire   [11:0] grp_fu_549_p1;
wire   [10:0] grp_fu_549_p2;
reg   [31:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [14:0] grp_fu_549_p00;
wire   [14:0] grp_fu_549_p20;
reg    ap_condition_615;

// power-on initialization
initial begin
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 32'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_reg_grp_knn_vote_fu_272_ap_start = 1'b0;
#0 ap_reg_grp_update_knn_fu_277_ap_start = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

DigitRec_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
DigitRec_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .training_data_V(training_data_V),
    .testing_data_V(testing_data_V),
    .results_V(results_V)
);

DigitRec_gmem_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
DigitRec_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_668),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_65_reg_680),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

DigitRec_knn_set_V #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
knn_set_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(knn_set_V_address0),
    .ce0(knn_set_V_ce0),
    .we0(knn_set_V_we0),
    .d0(knn_set_V_d0),
    .q0(knn_set_V_q0),
    .address1(knn_set_V_address1),
    .ce1(knn_set_V_ce1),
    .we1(knn_set_V_we1),
    .d1(grp_update_knn_fu_277_min_distances_V_d1),
    .q1(knn_set_V_q1)
);

knn_vote grp_knn_vote_fu_272(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_knn_vote_fu_272_ap_start),
    .ap_done(grp_knn_vote_fu_272_ap_done),
    .ap_idle(grp_knn_vote_fu_272_ap_idle),
    .ap_ready(grp_knn_vote_fu_272_ap_ready),
    .knn_set_V_address0(grp_knn_vote_fu_272_knn_set_V_address0),
    .knn_set_V_ce0(grp_knn_vote_fu_272_knn_set_V_ce0),
    .knn_set_V_we0(grp_knn_vote_fu_272_knn_set_V_we0),
    .knn_set_V_d0(grp_knn_vote_fu_272_knn_set_V_d0),
    .knn_set_V_q0(knn_set_V_q0),
    .knn_set_V_address1(grp_knn_vote_fu_272_knn_set_V_address1),
    .knn_set_V_ce1(grp_knn_vote_fu_272_knn_set_V_ce1),
    .knn_set_V_q1(knn_set_V_q1),
    .ap_return(grp_knn_vote_fu_272_ap_return)
);

update_knn grp_update_knn_fu_277(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_update_knn_fu_277_ap_start),
    .ap_done(grp_update_knn_fu_277_ap_done),
    .ap_idle(grp_update_knn_fu_277_ap_idle),
    .ap_ready(grp_update_knn_fu_277_ap_ready),
    .test_inst_V(testing_instance_V_reg_591),
    .train_inst_V(training_instance_V_reg_648),
    .min_distances_V_address0(grp_update_knn_fu_277_min_distances_V_address0),
    .min_distances_V_ce0(grp_update_knn_fu_277_min_distances_V_ce0),
    .min_distances_V_q0(knn_set_V_q0),
    .min_distances_V_address1(grp_update_knn_fu_277_min_distances_V_address1),
    .min_distances_V_ce1(grp_update_knn_fu_277_min_distances_V_ce1),
    .min_distances_V_we1(grp_update_knn_fu_277_min_distances_V_we1),
    .min_distances_V_d1(grp_update_knn_fu_277_min_distances_V_d1),
    .min_distances_V_q1(knn_set_V_q1),
    .min_distances_V_offset(grp_update_knn_fu_277_min_distances_V_offset),
    .ap_ce(grp_update_knn_fu_277_ap_ce)
);

DigitRec_mac_muladd_4ns_12ns_11ns_15_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
DigitRec_mac_muladd_4ns_12ns_11ns_15_1_U7(
    .din0(grp_fu_549_p0),
    .din1(grp_fu_549_p1),
    .din2(grp_fu_549_p2),
    .dout(grp_fu_549_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state13))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_subdone == 1'b0))) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state13 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_subdone == 1'b0))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3_subdone == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_subdone == 1'b0)))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_knn_vote_fu_272_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state36) & (gmem_RVALID == 1'b1))) begin
            ap_reg_grp_knn_vote_fu_272_ap_start <= 1'b1;
        end else if ((1'b1 == grp_knn_vote_fu_272_ap_ready)) begin
            ap_reg_grp_knn_vote_fu_272_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_update_knn_fu_277_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (ap_block_pp1_stage2_11001 == 1'b0))) begin
            ap_reg_grp_update_knn_fu_277_ap_start <= 1'b1;
        end else if ((1'b1 == grp_update_knn_fu_277_ap_ready)) begin
            ap_reg_grp_update_knn_fu_277_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter0) & (exitcond_flatten_reg_604 == 1'd0) & (ap_block_pp1_stage3_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_state29) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter0) & (exitcond_flatten_reg_604 == 1'd0) & (1'b1 == gmem_ARREADY) & (ap_block_pp1_stage3_01001 == 1'b0)) | ((1'b1 == ap_CS_fsm_state29) & (1'b1 == gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            if (~((1'b0 == ap_sig_ioackin_gmem_AWREADY) | (1'b0 == grp_knn_vote_fu_272_ap_done))) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if (((1'b1 == gmem_AWREADY) & (grp_knn_vote_fu_272_ap_done == 1'b1))) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((1'b1 == gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_reg_250 <= 11'd0;
    end else if (((exitcond_flatten_reg_604 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        i1_reg_250 <= i1_cast4_mid2_v_reg_621;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond7_fu_358_p2))) begin
        i_reg_228 <= i_3_fu_364_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1))) begin
        i_reg_228 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        indvar_flatten_reg_239 <= 15'd0;
    end else if (((exitcond_flatten_reg_604 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        indvar_flatten_reg_239 <= indvar_flatten_next_reg_608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_261 <= 4'd0;
    end else if (((exitcond_flatten_reg_604 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        j_reg_261 <= j_1_reg_643;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_216 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state43) & (gmem_BVALID == 1'b1))) begin
        k_reg_216 <= k_2_reg_575;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        ap_reg_pp1_iter1_exitcond_flatten_reg_604 <= exitcond_flatten_reg_604;
        ap_reg_pp1_iter1_j_mid2_reg_613 <= j_mid2_reg_613;
        ap_reg_pp1_iter2_exitcond_flatten_reg_604 <= ap_reg_pp1_iter1_exitcond_flatten_reg_604;
        ap_reg_pp1_iter2_j_mid2_reg_613 <= ap_reg_pp1_iter1_j_mid2_reg_613;
        ap_reg_pp1_iter3_exitcond_flatten_reg_604 <= ap_reg_pp1_iter2_exitcond_flatten_reg_604;
        exitcond_flatten_reg_604 <= exitcond_flatten_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (gmem_RVALID == 1'b1))) begin
        gmem_addr_1_read_reg_675 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
        gmem_addr_1_reg_668[61 : 0] <= results_V6_sum_cast_fu_495_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten_fu_375_p2))) begin
        i1_cast4_mid2_v_reg_621 <= i1_cast4_mid2_v_fu_407_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        indvar_flatten_next_reg_608 <= indvar_flatten_next_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter0) & (exitcond_flatten_reg_604 == 1'd0) & (ap_block_pp1_stage3_11001 == 1'b0))) begin
        j_1_reg_643 <= j_1_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten_fu_375_p2))) begin
        j_mid2_reg_613 <= j_mid2_fu_393_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_2_reg_575 <= k_2_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        results_V6_sum_reg_658 <= results_V6_sum_fu_486_p2;
        tmp_57_reg_663 <= tmp_57_fu_491_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond6_fu_327_p2))) begin
        testing_data_V4_sum_reg_580 <= testing_data_V4_sum_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1))) begin
        testing_instance_V_reg_591 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_47_cast_reg_557[60 : 0] <= tmp_47_cast_fu_295_p1[60 : 0];
        tmp_48_cast_reg_562[60 : 0] <= tmp_48_cast_fu_309_p1[60 : 0];
        tmp_49_cast_reg_567[60 : 0] <= tmp_49_cast_fu_323_p1[60 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (exitcond_flatten_reg_604 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_11001 == 1'b0))) begin
        tmp_4_reg_627 <= grp_fu_549_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & ~((1'b0 == ap_sig_ioackin_gmem_AWREADY) | (1'b0 == grp_knn_vote_fu_272_ap_done)))) begin
        tmp_65_reg_680 <= tmp_65_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (ap_block_pp1_stage2_11001 == 1'b0))) begin
        tmp_6_reg_653 <= tmp_6_fu_458_p2;
        training_instance_V_reg_648 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_604 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_11001 == 1'b0))) begin
        training_data_V2_sum_reg_632 <= training_data_V2_sum_fu_424_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_375_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_327_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2) & (1'b0 == ap_enable_reg_pp1_iter3))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_327_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            gmem_ARADDR = results_V6_sum_cast_fu_495_p1;
        end else if ((ap_condition_615 == 1'b1)) begin
            gmem_ARADDR = training_data_V2_sum_cast_fu_429_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = testing_data_V4_sum_cast_fu_348_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter0) & (exitcond_flatten_reg_604 == 1'd0) & (1'b0 == ap_reg_ioackin_gmem_ARREADY) & (ap_block_pp1_stage3_01001 == 1'b0)) | ((1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & (grp_knn_vote_fu_272_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (gmem_BVALID == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (ap_block_pp1_stage2_11001 == 1'b0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (1'b0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage3 == 1'b0) & (exitcond_flatten_reg_604 == 1'd0)) | (1'b1 == ap_CS_fsm_state29))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage2 == 1'b0) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604)) | (1'b1 == ap_CS_fsm_state36))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (ap_block_pp1_stage3_11001 == 1'b0)) | ((1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604)))) begin
        grp_update_knn_fu_277_ap_ce = 1'b1;
    end else begin
        grp_update_knn_fu_277_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_604 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0 == 1'b0))) begin
        i1_phi_fu_254_p4 = i1_cast4_mid2_v_reg_621;
    end else begin
        i1_phi_fu_254_p4 = i1_reg_250;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_604 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0 == 1'b0))) begin
        indvar_flatten_phi_fu_243_p4 = indvar_flatten_next_reg_608;
    end else begin
        indvar_flatten_phi_fu_243_p4 = indvar_flatten_reg_239;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_604 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0 == 1'b0))) begin
        j_phi_fu_265_p4 = j_1_reg_643;
    end else begin
        j_phi_fu_265_p4 = j_reg_261;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        knn_set_V_address0 = tmp_s_fu_370_p1;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604)) | ((1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3) & (ap_block_pp1_stage1 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3)))) begin
        knn_set_V_address0 = grp_update_knn_fu_277_min_distances_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        knn_set_V_address0 = grp_knn_vote_fu_272_knn_set_V_address0;
    end else begin
        knn_set_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_block_pp1_stage3 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604)) | ((1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3) & (ap_block_pp1_stage1 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3)))) begin
        knn_set_V_address1 = grp_update_knn_fu_277_min_distances_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        knn_set_V_address1 = grp_knn_vote_fu_272_knn_set_V_address1;
    end else begin
        knn_set_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        knn_set_V_ce0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (ap_block_pp1_stage3_11001 == 1'b0)) | ((1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3)))) begin
        knn_set_V_ce0 = grp_update_knn_fu_277_min_distances_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        knn_set_V_ce0 = grp_knn_vote_fu_272_knn_set_V_ce0;
    end else begin
        knn_set_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (ap_block_pp1_stage3_11001 == 1'b0)) | ((1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3)))) begin
        knn_set_V_ce1 = grp_update_knn_fu_277_min_distances_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        knn_set_V_ce1 = grp_knn_vote_fu_272_knn_set_V_ce1;
    end else begin
        knn_set_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        knn_set_V_d0 = 6'd50;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        knn_set_V_d0 = grp_knn_vote_fu_272_knn_set_V_d0;
    end else begin
        knn_set_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond7_fu_358_p2))) begin
        knn_set_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        knn_set_V_we0 = grp_knn_vote_fu_272_knn_set_V_we0;
    end else begin
        knn_set_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (ap_block_pp1_stage3_11001 == 1'b0)) | ((1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter3_exitcond_flatten_reg_604) & (1'b1 == ap_enable_reg_pp1_iter3)))) begin
        knn_set_V_we1 = grp_update_knn_fu_277_min_distances_V_we1;
    end else begin
        knn_set_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond7_fu_358_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (((ap_block_pp1_stage0_subdone == 1'b0) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_subdone == 1'b0) & (exitcond_flatten_fu_375_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_subdone == 1'b0) & (exitcond_flatten_fu_375_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((ap_block_pp1_stage1_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if (((ap_block_pp1_stage2_subdone == 1'b0) & ~((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((ap_block_pp1_stage3_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & ~((1'b0 == ap_sig_ioackin_gmem_AWREADY) | (1'b0 == grp_knn_vote_fu_272_ap_done)))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (ap_sig_ioackin_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd31];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b0 == gmem_RVALID));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_block_state16_io));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_block_state16_io));
end

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((exitcond_flatten_reg_604 == 1'd0) & (1'b0 == ap_sig_ioackin_gmem_ARREADY));
end

assign ap_block_state16_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp1_stage2_iter2 = ((1'd0 == ap_reg_pp1_iter2_exitcond_flatten_reg_604) & (1'b0 == gmem_RVALID));
end

assign ap_block_state24_pp1_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage2_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_615 = ((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_enable_reg_pp1_iter0) & (exitcond_flatten_reg_604 == 1'd0) & (ap_block_pp1_stage3_01001 == 1'b0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond6_fu_327_p2 = ((k_reg_216 == 8'd180) ? 1'b1 : 1'b0);

assign exitcond7_fu_358_p2 = ((i_reg_228 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_375_p2 = ((indvar_flatten_phi_fu_243_p4 == 15'd18000) ? 1'b1 : 1'b0);

assign exitcond_fu_387_p2 = ((j_phi_fu_265_p4 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_549_p0 = grp_fu_549_p00;

assign grp_fu_549_p00 = j_mid2_reg_613;

assign grp_fu_549_p1 = 15'd1800;

assign grp_fu_549_p2 = grp_fu_549_p20;

assign grp_fu_549_p20 = i1_cast4_mid2_v_reg_621;

assign grp_knn_vote_fu_272_ap_start = ap_reg_grp_knn_vote_fu_272_ap_start;

assign grp_update_knn_fu_277_ap_start = ap_reg_grp_update_knn_fu_277_ap_start;

assign grp_update_knn_fu_277_min_distances_V_offset = $unsigned(tmp_13_cast_fu_464_p1);

assign i1_cast4_mid2_v_fu_407_p3 = ((exitcond_fu_387_p2[0:0] === 1'b1) ? i_s_fu_401_p2 : i1_phi_fu_254_p4);

assign i_3_fu_364_p2 = (i_reg_228 + 5'd1);

assign i_s_fu_401_p2 = (i1_phi_fu_254_p4 + 11'd1);

assign indvar_flatten_next_fu_381_p2 = (indvar_flatten_phi_fu_243_p4 + 15'd1);

assign j_1_fu_439_p2 = (j_mid2_reg_613 + 4'd1);

assign j_cast2_fu_444_p1 = ap_reg_pp1_iter2_j_mid2_reg_613;

assign j_mid2_fu_393_p3 = ((exitcond_fu_387_p2[0:0] === 1'b1) ? 4'd0 : j_phi_fu_265_p4);

assign k_2_fu_333_p2 = (k_reg_216 + 8'd1);

assign p_shl_cast_fu_454_p1 = p_shl_fu_447_p3;

assign p_shl_fu_447_p3 = {{ap_reg_pp1_iter2_j_mid2_reg_613}, {2'd0}};

assign results_V6_sum_cast_fu_495_p1 = results_V6_sum_reg_658;

assign results_V6_sum_fu_486_p2 = (tmp_47_cast_reg_557 + tmp1_cast_fu_482_p1);

assign testing_data_V4_sum_cast_fu_348_p1 = testing_data_V4_sum_reg_580;

assign testing_data_V4_sum_fu_343_p2 = (tmp_cast_fu_339_p1 + tmp_48_cast_reg_562);

assign tmp1_cast_fu_482_p1 = tmp_56_fu_472_p4;

assign tmp_13_cast_fu_464_p1 = $signed(tmp_6_reg_653);

assign tmp_47_cast_fu_295_p1 = tmp_fu_285_p4;

assign tmp_48_cast_fu_309_p1 = tmp_54_fu_299_p4;

assign tmp_49_cast_fu_323_p1 = tmp_55_fu_313_p4;

assign tmp_54_fu_299_p4 = {{testing_data_V[63:3]}};

assign tmp_55_fu_313_p4 = {{training_data_V[63:3]}};

assign tmp_56_fu_472_p4 = {{k_reg_216[7:4]}};

assign tmp_57_fu_491_p1 = k_reg_216[3:0];

assign tmp_58_fu_505_p3 = {{tmp_57_reg_663}, {2'd0}};

assign tmp_59_fu_512_p1 = tmp_58_fu_505_p3;

assign tmp_5_cast_fu_421_p1 = tmp_4_reg_627;

assign tmp_60_fu_516_p2 = 64'd15 << tmp_59_fu_512_p1;

assign tmp_61_fu_522_p2 = (tmp_60_fu_516_p2 ^ 64'd18446744073709551615);

assign tmp_62_fu_528_p2 = (gmem_addr_1_read_reg_675 & tmp_61_fu_522_p2);

assign tmp_63_fu_533_p1 = grp_knn_vote_fu_272_ap_return;

assign tmp_64_fu_537_p2 = tmp_63_fu_533_p1 << tmp_59_fu_512_p1;

assign tmp_65_fu_543_p2 = (tmp_62_fu_528_p2 | tmp_64_fu_537_p2);

assign tmp_6_fu_458_p2 = (p_shl_cast_fu_454_p1 - j_cast2_fu_444_p1);

assign tmp_cast_fu_339_p1 = k_reg_216;

assign tmp_fu_285_p4 = {{results_V[63:3]}};

assign tmp_s_fu_370_p1 = i_reg_228;

assign training_data_V2_sum_cast_fu_429_p1 = training_data_V2_sum_reg_632;

assign training_data_V2_sum_fu_424_p2 = (tmp_5_cast_fu_421_p1 + tmp_49_cast_reg_567);

always @ (posedge ap_clk) begin
    tmp_47_cast_reg_557[61] <= 1'b0;
    tmp_48_cast_reg_562[61] <= 1'b0;
    tmp_49_cast_reg_567[61] <= 1'b0;
    gmem_addr_1_reg_668[63:62] <= 2'b00;
end

endmodule //DigitRec
